#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jun 15, 2022 03:24:51 PM CDT  platform: Windows NT

import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image
from GUI import statPrevious
from GUI.Window import Window
from DataAccess import dataAccess


class LoginGui(Window):
    """ Keep this window as the bottom GUI element. Create and destroy GUI windows
        above this window as necessary."""
    def __init__(self, top=None):
        self.top = top
        self.home = None  # will be the home screen after login

        with Image.open("../Resources/bee.png") as icon:
            self.img = icon.convert("RGB")

        self.BaseFrame = tk.Frame(self.top)
        self.BaseFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.BaseFrame.configure(relief='groove')
        self.BaseFrame.configure(borderwidth="2")
        self.BaseFrame.configure(relief="groove")
        self.BaseFrame.configure(background="#000000")

        self.TitleLabel1 = tk.Label(self.BaseFrame)
        self.TitleLabel1.place(relx=0.409, rely=0.088, height=92, width=230)
        self.TitleLabel1.configure(background="#000000")
        self.TitleLabel1.configure(compound='center')
        self.TitleLabel1.configure(disabledforeground="#a3a3a3")
        self.TitleLabel1.configure(font="-family {Arial} -size 48")
        self.TitleLabel1.configure(foreground="#f2b83d")
        self.TitleLabel1.configure(text='''S.T.A.T''')

        self.TitleLabel2 = tk.Label(self.BaseFrame)
        self.TitleLabel2.place(relx=0.336, rely=0.228, height=40, width=424)
        self.TitleLabel2.configure(background="#000000")
        self.TitleLabel2.configure(compound='left')
        self.TitleLabel2.configure(disabledforeground="#a3a3a3")
        self.TitleLabel2.configure(font="-family {Arial} -size 20")
        self.TitleLabel2.configure(foreground="#f2b83d")
        self.TitleLabel2.configure(text='''Swarm Testing and Analysis Tool''')

        self.UsernameLabel = tk.Label(self.BaseFrame)
        self.UsernameLabel.place(relx=0.367, rely=0.67, height=32, width=102)
        self.UsernameLabel.configure(background="#000000")
        self.UsernameLabel.configure(compound='center')
        self.UsernameLabel.configure(cursor="fleur")
        self.UsernameLabel.configure(disabledforeground="#a3a3a3")
        self.UsernameLabel.configure(font="-family {Arial} -size 15")
        self.UsernameLabel.configure(foreground="#f2b83d")
        self.UsernameLabel.configure(text='''Username:''')

        self.UsernameEntry = tk.Entry(self.BaseFrame)
        self.UsernameEntry.place(relx=0.461, rely=0.677, height=20, relwidth=0.175)
        self.UsernameEntry.configure(background="#f2b83d")
        self.UsernameEntry.configure(disabledforeground="#a3a3a3")
        self.UsernameEntry.configure(font="-family {Arial} -size 10")
        self.UsernameEntry.configure(foreground="#000000")
        self.UsernameEntry.configure(insertbackground="black")
        self.UsernameEntry.configure(selectbackground="#f2b83d")
        self.UsernameEntry.configure(selectforeground="#ffffff")

        self.LoginButton = tk.Button(self.BaseFrame)
        self.LoginButton.place(relx=0.398, rely=0.776, height=44, width=107)
        self.LoginButton.configure(activebackground="#f2b83d")
        self.LoginButton.configure(activeforeground="#000000")
        self.LoginButton.configure(background="#f2b83d")
        self.LoginButton.configure(command=lambda: self.login_with_username())
        self.LoginButton.configure(compound='center')
        self.LoginButton.configure(disabledforeground="#a3a3a3")
        self.LoginButton.configure(font="-family {Arial} -size 9")
        self.LoginButton.configure(foreground="#000000")
        self.LoginButton.configure(highlightbackground="#d9d9d9")
        self.LoginButton.configure(highlightcolor="black")
        self.LoginButton.configure(pady="15", padx="15")
        self.LoginButton.configure(text='''Login''')

        self.AccountButton = tk.Button(self.BaseFrame)
        self.AccountButton.place(relx=0.523, rely=0.776, height=44, width=107)
        self.AccountButton.configure(activebackground="#f2b83d")
        self.AccountButton.configure(activeforeground="#000000")
        self.AccountButton.configure(background="#f2b83d")
        self.AccountButton.configure(command=lambda: self.create_new_account())
        self.AccountButton.configure(compound='center')
        self.AccountButton.configure(disabledforeground="#a3a3a3")
        self.AccountButton.configure(font="-family {Arial} -size 9")
        self.AccountButton.configure(foreground="#000000")
        self.AccountButton.configure(highlightbackground="#d9d9d9")
        self.AccountButton.configure(highlightcolor="black")
        self.AccountButton.configure(pady="15", padx="15")
        self.AccountButton.configure(text='''Create Account''')

        self.LogoCanvas = tk.Canvas(self.BaseFrame)
        self.LogoCanvas.place(relx=0.4, rely=0.3, relheight=0.34, relwidth=0.2)
        self.LogoCanvas.configure(background="#000000")
        self.LogoCanvas.configure(borderwidth="0", highlightthickness="0")
        self.LogoCanvas.configure(relief="solid")
        # Create an object of tkinter ImageTk
        self.logo = ImageTk.PhotoImage(self.img.resize((100, 100)))
        self.can_img = self.LogoCanvas.create_image(0, 0, anchor="nw", image=self.logo)
        self.LogoCanvas.bind("<Configure>", self.resize)

    def login_with_username(self):
        username = self.UsernameEntry.get()
        if username == "":
            messagebox.showinfo(title="Error", message="Enter a username.")
        else:
            error = dataAccess.login(username)
            if error != "":
                messagebox.showinfo(title="Error", message=error)
            else:
                self.home = statPrevious.PreviousGui(self.top, self)

    def create_new_account(self):
        username = self.UsernameEntry.get()
        if username == "":
            messagebox.showinfo(title="Error", message="Enter a username.")
        else:
            error = dataAccess.create_user(username)
            if error != "":
                messagebox.showinfo(title="Error", message=error)
            else:
                messagebox.showinfo(title="Success", message="Account created.")
            self.UsernameEntry.delete(0, tk.END)

    def log_out(self):
        """Invoked by the home window (statPrevious) when the user logs
           out from any window"""
        self.home = None
        dataAccess.logout()
        self.UsernameEntry.delete(0, tk.END)

    def destroy(self):
        self.BaseFrame.destroy()
        del self

    # This function is called when the canvas is resized in order to
    # resize the image within
    def resize(self, event):
        height = event.height
        width = event.width
        self.logo = ImageTk.PhotoImage(self.img.resize((width, height)))
        self.LogoCanvas.itemconfig(self.can_img, image=self.logo)
