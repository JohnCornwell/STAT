#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jun 15, 2022 03:24:51 PM CDT  platform: Windows NT

import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk
import globals
from GUI.Window import Window
from GUI import statDemand, statDetails, autoScroll, errorPopup
from DataAccess import dataAccess


class PreviousGui(Window):
    def __init__(self, top=None, login_screen=None):

        self.top = top
        self.login_screen = login_screen  # the login window that created this window
        self.username = globals.username

        self.next = None  # the screen to review a previous run, or set up a new run

        with Image.open("../Resources/bee.png") as icon:
            self.img = icon.convert("RGB")

        self.BaseFrame = tk.Frame(self.top)
        self.BaseFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)

        self.BaseFrame.configure(relief='groove')
        self.BaseFrame.configure(borderwidth="2")
        self.BaseFrame.configure(relief="groove")
        self.BaseFrame.configure(background="#000000")

        self.PreviousRunsLabel = tk.Label(self.BaseFrame)
        self.PreviousRunsLabel.place(relx=0.102, rely=0.046, height=40, width=192)
        self.PreviousRunsLabel.configure(background="#000000")
        self.PreviousRunsLabel.configure(compound='left')
        self.PreviousRunsLabel.configure(disabledforeground="#a3a3a3")
        self.PreviousRunsLabel.configure(font="-family {Arial} -size 20")
        self.PreviousRunsLabel.configure(foreground="#f2b83d")
        self.PreviousRunsLabel.configure(text='''Previous Runs''')

        self.DeleteButton = tk.Button(self.BaseFrame)
        self.DeleteButton.place(relx=0.391, rely=0.137, height=44, width=107)
        self.DeleteButton.configure(activebackground="#f2b83d")
        self.DeleteButton.configure(activeforeground="#000000")
        self.DeleteButton.configure(background="#f2b83d")
        self.DeleteButton.configure(command=lambda: self.delete_previous_run())
        self.DeleteButton.configure(compound='center')
        self.DeleteButton.configure(font="-family {Arial} -size 9")
        self.DeleteButton.configure(foreground="#000000")
        self.DeleteButton.configure(highlightbackground="#d9d9d9")
        self.DeleteButton.configure(highlightcolor="black")
        self.DeleteButton.configure(pady="0")
        self.DeleteButton.configure(text='''Delete''')

        self.ViewButton = tk.Button(self.BaseFrame)
        self.ViewButton.place(relx=0.391, rely=0.274, height=44, width=107)
        self.ViewButton.configure(activebackground="#f2b83d")
        self.ViewButton.configure(activeforeground="#000000")
        self.ViewButton.configure(background="#f2b83d")
        self.ViewButton.configure(command=lambda: self.view_previous_run())
        self.ViewButton.configure(compound='center')
        self.ViewButton.configure(font="-family {Arial} -size 9")
        self.ViewButton.configure(foreground="#000000")
        self.ViewButton.configure(highlightbackground="#d9d9d9")
        self.ViewButton.configure(highlightcolor="black")
        self.ViewButton.configure(pady="0")
        self.ViewButton.configure(text='''View''')

        self.LogoCanvas = tk.Canvas(self.BaseFrame)
        self.LogoCanvas.place(relx=0.617, rely=0.289, relheight=0.658, relwidth=0.336)
        self.LogoCanvas.configure(background="#000000")
        self.LogoCanvas.configure(borderwidth="0", highlightthickness="0")
        self.LogoCanvas.configure(insertbackground="black")
        self.LogoCanvas.configure(relief="ridge")
        self.LogoCanvas.configure(selectbackground="#c4c4c4")
        self.LogoCanvas.configure(selectforeground="black")
        self.logo = ImageTk.PhotoImage(self.img.resize((432, 430)))
        self.LogoCanvas.create_image(0, 0, anchor="nw", image=self.logo)

        self.ScrolledTestBox = autoScroll.ScrolledListBox(self.BaseFrame)
        self.ScrolledTestBox.place(relx=0.039, rely=0.137, relheight=0.814, relwidth=0.291)
        self.ScrolledTestBox.configure(background="white")
        self.ScrolledTestBox.configure(activestyle="dotbox")
        self.ScrolledTestBox.configure(cursor="xterm")
        self.ScrolledTestBox.configure(disabledforeground="#a3a3a3")
        self.ScrolledTestBox.configure(font="-family {Arial} -size 20")
        self.ScrolledTestBox.configure(foreground="black")
        self.ScrolledTestBox.configure(highlightbackground="#d9d9d9")
        self.ScrolledTestBox.configure(highlightcolor="#d9d9d9")
        self.ScrolledTestBox.configure(selectbackground="#000000")
        self.ScrolledTestBox.configure(selectforeground="#f2b83d")

        self.LoadButton = tk.Button(self.BaseFrame)
        self.LoadButton.place(relx=0.391, rely=0.411, height=44, width=107)
        self.LoadButton.configure(activebackground="#f2b83d")
        self.LoadButton.configure(activeforeground="#000000")
        self.LoadButton.configure(background="#f2b83d")
        self.LoadButton.configure(command=lambda: self.load_previous_run())
        self.LoadButton.configure(compound='center')
        self.LoadButton.configure(font="-family {Arial} -size 9")
        self.LoadButton.configure(foreground="#000000")
        self.LoadButton.configure(highlightbackground="#d9d9d9")
        self.LoadButton.configure(highlightcolor="black")
        self.LoadButton.configure(pady="0")
        self.LoadButton.configure(text='''Load''')

        self.UsernameLabel = tk.Label(self.BaseFrame)
        self.UsernameLabel.place(relx=0.68, rely=0.015, height=60, width=285)
        self.UsernameLabel.configure(anchor='nw')
        self.UsernameLabel.configure(background="#000000")
        self.UsernameLabel.configure(compound='left')
        self.UsernameLabel.configure(disabledforeground="#a3a3a3")
        self.UsernameLabel.configure(font="-family {Arial} -size 13")
        self.UsernameLabel.configure(foreground="#f2b83d")
        self.UsernameLabel.configure(text='''Logged in as: {}'''.format(self.username))

        self.log_outButton = tk.Button(self.BaseFrame)
        self.log_outButton.place(relx=0.906, rely=0.015, height=44, width=107)
        self.log_outButton.configure(activebackground="#f2b83d")
        self.log_outButton.configure(activeforeground="#000000")
        self.log_outButton.configure(background="#f2b83d")
        self.log_outButton.configure(command=self.log_out)
        self.log_outButton.configure(compound='center')
        self.log_outButton.configure(disabledforeground="#a3a3a3")
        self.log_outButton.configure(font="-family {Arial} -size 9")
        self.log_outButton.configure(foreground="#000000")
        self.log_outButton.configure(highlightbackground="#d9d9d9")
        self.log_outButton.configure(highlightcolor="black")
        self.log_outButton.configure(pady="0")
        self.log_outButton.configure(text='''Log Out''')

        self.NewButton = tk.Button(self.BaseFrame)
        self.NewButton.place(relx=0.391, rely=0.548, height=44, width=107)
        self.NewButton.configure(activebackground="#f2b83d")
        self.NewButton.configure(activeforeground="#000000")
        self.NewButton.configure(background="#f2b83d")
        self.NewButton.configure(command=lambda: self.create_new_run())
        self.NewButton.configure(compound='center')
        self.NewButton.configure(disabledforeground="#a3a3a3")
        self.NewButton.configure(font="-family {Arial} -size 9")
        self.NewButton.configure(foreground="#000000")
        self.NewButton.configure(highlightbackground="#d9d9d9")
        self.NewButton.configure(highlightcolor="black")
        self.NewButton.configure(pady="0")
        self.NewButton.configure(text='''New''')

        self.populate_list()

    def populate_list(self):
        self.ScrolledTestBox.delete(0, tk.END)

        result = dataAccess.list_tests()
        if isinstance(result, str):
            # This is an error message and not a result
            errorPopup.ErrorGui(top=self.top, error_list=list(result), title=result)
        else:
            for run in result:
                self.ScrolledTestBox.insert(tk.END, run)

        if self.ScrolledTestBox.size_() == 0:
            self.DeleteButton["state"] = tk.DISABLED
            self.DeleteButton["background"] = "#a3a3a3"
            self.LoadButton["state"] = tk.DISABLED
            self.LoadButton["background"] = "#a3a3a3"
            self.ViewButton["state"] = tk.DISABLED
            self.ViewButton["background"] = "#a3a3a3"
        else:
            self.DeleteButton["state"] = tk.NORMAL
            self.DeleteButton["background"] = "#f2b83d"
            self.LoadButton["state"] = tk.NORMAL
            self.LoadButton["background"] = "#f2b83d"
            self.ViewButton["state"] = tk.NORMAL
            self.ViewButton["background"] = "#f2b83d"
            self.ScrolledTestBox.selection_set(0)

    def log_out(self):
        self.next = None
        self.BaseFrame.destroy()
        self.login_screen.log_out()
        del self

    def destroy(self):
        self.BaseFrame.destroy()
        del self

    def create_new_run(self):
        self.get_tasks()

    def delete_previous_run(self):
        test = self.ScrolledTestBox.selection_get()
        answer = messagebox.askokcancel(title="Delete Test", message="Delete " + test + "?")
        if not answer:
            return
        error = dataAccess.delete_test(test)
        if error != "":
            messagebox.showinfo(title="Error", message=error)
        else:
            # refresh the list of tests in the user directory
            self.refresh()

    def load_previous_run(self):
        test = self.ScrolledTestBox.selection_get()
        answer = messagebox.askokcancel(title="Load Test", message="Load " + test + "?")
        if not answer:
            return
        error, values = dataAccess.load_test(test)
        if error != "":
            messagebox.showinfo(title="Error", message=error)
        else:
            # Pass the collected information to the next window
            if values.get("Num_tasks") is None or not values.get("Num_tasks").isnumeric():
                messagebox.showinfo(title="Error", message="Task parameters is missing Num_tasks.")
            else:
                self.next = statDemand.DemandGui(top=self.top, previous=self, home=self,
                                                 num_tasks=int(values.get("Num_tasks")),
                                                 data=values)

    def view_previous_run(self):
        test = self.ScrolledTestBox.selection_get()
        answer = messagebox.askokcancel(title="View Test", message="View " + test + " info?")
        if not answer:
            return
        else:
            self.next = statDetails.DetailsWindow(top=self.top, previous=self, name=test)

    # Create a popup window to get the number of desired tasks and generate a
    # demand window containing those tasks
    def get_tasks(self):
        task_window = tk.Toplevel(self.top)
        task_window["bg"] = "black"
        task_window.geometry('300x150')
        task_window.resizable(False, False)
        task_window.grab_set()
        task_window.tk.call('wm', 'iconphoto', task_window._w, globals.icon)
        task_window.title("Create New Test")

        # this will be called when the submit button is clicked
        def on_submit():
            try:
                tasks = int(tasks_input.get())
                if tasks > 24:
                    messagebox.showinfo(title="Error", message="Please enter an integer less than 25.")
                elif tasks < 1:
                    raise ValueError
                else:
                    task_window.grab_release()
                    task_window.destroy()
                    globals.numTasks = tasks
                    self.next = statDemand.DemandGui(top=self.top, previous=self, home=self, num_tasks=tasks, data=None)
            except ValueError:
                messagebox.showinfo(title="Error", message="You must enter a positive integer.")

        # this will be called when the popup is closed
        def on_closing():
            task_window.grab_release()
            task_window.destroy()

        base_frame = tk.Frame(task_window, width=200, height=200, borderwidth=2, bg="black")
        base_frame.pack()
        task_window.protocol("WM_DELETE_WINDOW", on_closing)
        label = tk.Label(base_frame, text="Enter a number of tasks:", bg="black", fg="#f2b83d",
                         font="-family {Arial} -size 13")
        label.grid(row=0, column=0, pady=5)
        tasks_input = tk.Entry(base_frame, bg="#f2b83d", fg="black", width=15, font="-family {Arial} -size 13")
        tasks_input.grid(row=1, column=0)
        # For some reason, a 7 x 2 pixel button takes up more than 7 x 2 pixels...
        button_close = tk.Button(base_frame, width=7, height=2, text="Submit", background="#f2b83d",
                                 command=lambda: on_submit())
        button_close.grid(row=2, column=0, padx=10, pady=10)

    # This method is called when the data in the GUI is out of date and needs to be updated
    def refresh(self):
        self.populate_list()
