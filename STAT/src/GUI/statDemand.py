#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Aug 03, 2022 07:05:13 PM CDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import messagebox
import globals
from GUI import statSwarm, errorPopup, autoScroll
from GUI.Window import Window
from SimCommunication import simSetup


class DemandGui(Window):
    def __init__(self, top=None, previous=None, home=None, num_tasks=1, data=None):
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'
        _ana2color = 'beige'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        self.top = top
        self.username = globals.username
        self.numTasks = num_tasks
        globals.numTasks = self.numTasks
        self.previous = previous  # the screen that generated this view (home or view task)
        self.home = home  # reference to the home screen that is passed to the Results screen after testing
        self.next = None
        self.data = data  # data from a previous test that the user wants to load

        self.BaseFrame = tk.Frame(self.top)
        self.BaseFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.BaseFrame.configure(background="#000000")
        self.BaseFrame.configure(highlightbackground="#d9d9d9")
        self.BaseFrame.configure(highlightcolor="black")

        self.DemandDetailsLabel = tk.Label(self.BaseFrame)
        self.DemandDetailsLabel.place(relx=0.406, rely=0.076, height=40, width=230)
        self.DemandDetailsLabel.configure(activebackground="#f9f9f9")
        self.DemandDetailsLabel.configure(background="#000000")
        self.DemandDetailsLabel.configure(compound='left')
        self.DemandDetailsLabel.configure(disabledforeground="#a3a3a3")
        self.DemandDetailsLabel.configure(font="-family {Arial} -size 24")
        self.DemandDetailsLabel.configure(foreground="#f2b83d")
        self.DemandDetailsLabel.configure(highlightbackground="#d9d9d9")
        self.DemandDetailsLabel.configure(highlightcolor="black")
        self.DemandDetailsLabel.configure(text='''Demand Details''')

        self.BackButton = tk.Button(self.BaseFrame)
        self.BackButton.place(relx=0.406, rely=0.913, height=44, width=107)
        self.BackButton.configure(activebackground="white")
        self.BackButton.configure(activeforeground="#000000")
        self.BackButton.configure(background="#f2b83d")
        self.BackButton.configure(command=lambda: self.go_back())
        self.BackButton.configure(compound='center')
        self.BackButton.configure(disabledforeground="#a3a3a3")
        self.BackButton.configure(font="-family {Arial} -size 9")
        self.BackButton.configure(foreground="#000000")
        self.BackButton.configure(highlightbackground="#d9d9d9")
        self.BackButton.configure(highlightcolor="black")
        self.BackButton.configure(pady="0")
        self.BackButton.configure(text='''Back''')

        self.NextButton = tk.Button(self.BaseFrame)
        self.NextButton.place(relx=0.516, rely=0.913, height=44, width=107)
        self.NextButton.configure(activebackground="white")
        self.NextButton.configure(activeforeground="#000000")
        self.NextButton.configure(background="#f2b83d")
        self.NextButton.configure(command=lambda: self.to_swarm())
        self.NextButton.configure(compound='center')
        self.NextButton.configure(disabledforeground="#a3a3a3")
        self.NextButton.configure(font="-family {Arial} -size 9")
        self.NextButton.configure(foreground="#000000")
        self.NextButton.configure(highlightbackground="#d9d9d9")
        self.NextButton.configure(highlightcolor="black")
        self.NextButton.configure(pady="0")
        self.NextButton.configure(text='''Next''')

        self.UsernameLabel = tk.Label(self.BaseFrame)
        self.UsernameLabel.place(relx=0.68, rely=0.015, height=60, width=285)
        self.UsernameLabel.configure(activebackground="#f9f9f9")
        self.UsernameLabel.configure(anchor='nw')
        self.UsernameLabel.configure(background="#000000")
        self.UsernameLabel.configure(compound='left')
        self.UsernameLabel.configure(disabledforeground="#a3a3a3")
        self.UsernameLabel.configure(font="-family {Arial} -size 13")
        self.UsernameLabel.configure(foreground="#f2b83d")
        self.UsernameLabel.configure(highlightbackground="#d9d9d9")
        self.UsernameLabel.configure(highlightcolor="black")
        self.UsernameLabel.configure(text='''Logged in as: {}'''.format(self.username))

        self.LogOutButton = tk.Button(self.BaseFrame)
        self.LogOutButton.place(relx=0.906, rely=0.015, height=44, width=107)
        self.LogOutButton.configure(activebackground="white")
        self.LogOutButton.configure(activeforeground="#000000")
        self.LogOutButton.configure(background="#f2b83d")
        self.LogOutButton.configure(command=lambda: self.log_out_click())
        self.LogOutButton.configure(compound='center')
        self.LogOutButton.configure(disabledforeground="#a3a3a3")
        self.LogOutButton.configure(font="-family {Arial} -size 9")
        self.LogOutButton.configure(foreground="#000000")
        self.LogOutButton.configure(highlightbackground="#d9d9d9")
        self.LogOutButton.configure(highlightcolor="black")
        self.LogOutButton.configure(pady="0")
        self.LogOutButton.configure(text='''Log Out''')

        self.ScrolledWindow = autoScroll.ScrolledWindow(self.BaseFrame, highlightthickness=0)
        self.ScrolledWindow.place(relx=0.0, rely=0.152, relheight=0.743, relwidth=1.0)
        self.ScrolledWindow.configure(background="#000000")
        self.ScrolledWindow.configure(highlightbackground="#d9d9d9")
        self.ScrolledWindow.configure(highlightcolor="black")
        self.ScrolledWindow.configure(insertbackground="black")
        self.ScrolledWindow.configure(selectbackground="#c4c4c4")
        self.ScrolledWindow.configure(selectforeground="black")
        self.color = self.ScrolledWindow.cget("background")
        self.ScrolledWindow_f = tk.Frame(self.ScrolledWindow, background=self.color)
        self.ScrolledWindow.create_window(0, 0, anchor='nw', window=self.ScrolledWindow_f)

        # This class represents one task specification
        class TaskFrame:
            def __init__(self, ScrolledWindow, ScrolledWindow_f, place):
                self.ScrolledWindow_f = ScrolledWindow_f
                # update so that we have the proper dims
                ScrolledWindow.update()
                height = ScrolledWindow.winfo_height()
                width = ScrolledWindow.winfo_width()
                self.TaskFrame = tk.Frame(self.ScrolledWindow_f, height=0.7*height, width=0.98*width)
                self.TaskFrame.grid(row=place, column=0, ipadx=0.008, ipady=0.021, sticky="wesn")
                self.TaskFrame.configure(background="#000000")
                self.TaskFrame.configure(highlightbackground="#d9d9d9")
                self.TaskFrame.configure(highlightcolor="black")

                self.DemandDetailsLabel = tk.Label(self.TaskFrame)
                self.DemandDetailsLabel.place(relx=0.41, rely=0.077, height=30, width=223)
                self.DemandDetailsLabel.configure(activebackground="#f9f9f9")
                self.DemandDetailsLabel.configure(background="#000000")
                self.DemandDetailsLabel.configure(compound='left')
                self.DemandDetailsLabel.configure(disabledforeground="#a3a3a3")
                self.DemandDetailsLabel.configure(font="-family {Arial} -size 24")
                self.DemandDetailsLabel.configure(foreground="#f2b83d")
                self.DemandDetailsLabel.configure(highlightbackground="#d9d9d9")
                self.DemandDetailsLabel.configure(highlightcolor="black")
                self.DemandDetailsLabel.configure(text="Task {} ($t{})".format(place, place))

                self.DemandProfileLabel = tk.Label(self.TaskFrame)
                self.DemandProfileLabel.place(relx=0.047, rely=0.304, height=23, width=196)
                self.DemandProfileLabel.configure(activebackground="#f9f9f9")
                self.DemandProfileLabel.configure(anchor='w')
                self.DemandProfileLabel.configure(background="#000000")
                self.DemandProfileLabel.configure(compound='left')
                self.DemandProfileLabel.configure(disabledforeground="#a3a3a3")
                self.DemandProfileLabel.configure(font="-family {Arial} -size 15")
                self.DemandProfileLabel.configure(foreground="#f2b83d")
                self.DemandProfileLabel.configure(highlightbackground="#d9d9d9")
                self.DemandProfileLabel.configure(highlightcolor="black")
                self.DemandProfileLabel.configure(text='''Task Demand Profile''')

                self.DemandProfileEntry = ttk.Combobox(self.TaskFrame)
                self.DemandProfileEntry.place(relx=0.203, rely=0.304, height=23, relwidth=0.113)
                self.value_list = ['square', 'positive sine', 'sine', 'random', 'cycloid', 'positive zig zag',
                                   'zig zag', 'stair', 'trapezoid', 'custom']
                self.DemandProfileEntry.configure(values=self.value_list)
                self.DemandProfileEntry.configure(takefocus="")
                self.DemandProfileEntry.set("square")
                self.DemandProfileEntry.configure(validate="focusin")
                self.DemandProfileEntry.configure(validatecommand=lambda: self.update_task())
                self.DemandProfileEntry.configure(state="readonly")

                self.DemandAmplitudeLabel = tk.Label(self.TaskFrame)
                self.DemandAmplitudeLabel.place(relx=0.359, rely=0.304, height=23, width=166)
                self.DemandAmplitudeLabel.configure(activebackground="#f9f9f9")
                self.DemandAmplitudeLabel.configure(anchor='w')
                self.DemandAmplitudeLabel.configure(background="#000000")
                self.DemandAmplitudeLabel.configure(compound='left')
                self.DemandAmplitudeLabel.configure(disabledforeground="#a3a3a3")
                self.DemandAmplitudeLabel.configure(font="-family {Arial} -size 15")
                self.DemandAmplitudeLabel.configure(foreground="#f2b83d")
                self.DemandAmplitudeLabel.configure(highlightbackground="#d9d9d9")
                self.DemandAmplitudeLabel.configure(highlightcolor="black")
                self.DemandAmplitudeLabel.configure(text='''Demand Amplitude''')

                self.AmplitudeEntry = tk.Entry(self.TaskFrame)
                self.AmplitudeEntry.place(relx=0.523, rely=0.304, height=20, relwidth=0.116)
                self.AmplitudeEntry.configure(background="#f2b83d")
                self.AmplitudeEntry.configure(disabledbackground="#a3a3a3")
                self.AmplitudeEntry.configure(font="TkFixedFont")
                self.AmplitudeEntry.configure(foreground="#000000")
                self.AmplitudeEntry.configure(highlightbackground="#d9d9d9")
                self.AmplitudeEntry.configure(highlightcolor="black")
                self.AmplitudeEntry.configure(insertbackground="black")
                self.AmplitudeEntry.configure(selectbackground="#c4c4c4")
                self.AmplitudeEntry.configure(selectforeground="black")
                self.AmplitudeEntry.insert(0, "10")

                self.DemandPeriodLabel = tk.Label(self.TaskFrame)
                self.DemandPeriodLabel.place(relx=0.672, rely=0.304, height=23, width=150)
                self.DemandPeriodLabel.configure(activebackground="#f9f9f9")
                self.DemandPeriodLabel.configure(anchor='w')
                self.DemandPeriodLabel.configure(background="#000000")
                self.DemandPeriodLabel.configure(compound='left')
                self.DemandPeriodLabel.configure(disabledforeground="#a3a3a3")
                self.DemandPeriodLabel.configure(font="-family {Arial} -size 15")
                self.DemandPeriodLabel.configure(foreground="#f2b83d")
                self.DemandPeriodLabel.configure(highlightbackground="#d9d9d9")
                self.DemandPeriodLabel.configure(highlightcolor="black")
                self.DemandPeriodLabel.configure(text='''Demand Period''')

                self.PeriodEntry = tk.Entry(self.TaskFrame)
                self.PeriodEntry.place(relx=0.828, rely=0.304, height=20, relwidth=0.116)
                self.PeriodEntry.configure(background="#f2b83d")
                self.PeriodEntry.configure(disabledbackground="#a3a3a3")
                self.PeriodEntry.configure(font="TkFixedFont")
                self.PeriodEntry.configure(foreground="#000000")
                self.PeriodEntry.configure(highlightbackground="#d9d9d9")
                self.PeriodEntry.configure(highlightcolor="black")
                self.PeriodEntry.configure(insertbackground="black")
                self.PeriodEntry.configure(selectbackground="#c4c4c4")
                self.PeriodEntry.configure(selectforeground="black")
                self.PeriodEntry.insert(0, "20")

                self.RangeLabel = tk.Label(self.TaskFrame)
                self.RangeLabel.place(relx=0.23, rely=0.545, height=43, width=69)
                self.RangeLabel.configure(activebackground="#f9f9f9")
                self.RangeLabel.configure(anchor='w')
                self.RangeLabel.configure(background="#000000")
                self.RangeLabel.configure(compound='left')
                self.RangeLabel.configure(disabledforeground="#a3a3a3")
                self.RangeLabel.configure(font="-family {Arial} -size 15")
                self.RangeLabel.configure(foreground="#f2b83d")
                self.RangeLabel.configure(highlightbackground="#d9d9d9")
                self.RangeLabel.configure(highlightcolor="black")
                self.RangeLabel.configure(text='''Range''')

                self.RangeEntry = tk.Entry(self.TaskFrame)
                self.RangeEntry.place(relx=0.302, rely=0.569, height=20, relwidth=0.116)
                self.RangeEntry.configure(background="#f2b83d")
                self.RangeEntry.configure(disabledbackground="#a3a3a3")
                self.RangeEntry.configure(font="TkFixedFont")
                self.RangeEntry.configure(foreground="#000000")
                self.RangeEntry.configure(highlightbackground="#d9d9d9")
                self.RangeEntry.configure(highlightcolor="black")
                self.RangeEntry.configure(insertbackground="black")
                self.RangeEntry.configure(selectbackground="#c4c4c4")
                self.RangeEntry.configure(selectforeground="black")
                self.RangeEntry.insert(0, "10")

                self.DemandFunctionLabel = tk.Label(self.TaskFrame)
                self.DemandFunctionLabel.place(relx=0.485, rely=0.569, height=23, width=155)
                self.DemandFunctionLabel.configure(activebackground="#f9f9f9")
                self.DemandFunctionLabel.configure(anchor='w')
                self.DemandFunctionLabel.configure(background="#000000")
                self.DemandFunctionLabel.configure(compound='left')
                self.DemandFunctionLabel.configure(disabledforeground="#a3a3a3")
                self.DemandFunctionLabel.configure(font="-family {Arial} -size 15")
                self.DemandFunctionLabel.configure(foreground="#f2b83d")
                self.DemandFunctionLabel.configure(highlightbackground="#d9d9d9")
                self.DemandFunctionLabel.configure(highlightcolor="black")
                self.DemandFunctionLabel.configure(text='''Demand Function''')

                self.FunctionEntry = tk.Entry(self.TaskFrame)
                self.FunctionEntry.place(relx=0.627, rely=0.569, height=20, relwidth=0.189)
                self.FunctionEntry.configure(background="#f2b83d")
                self.FunctionEntry.configure(disabledbackground="#a3a3a3")
                self.FunctionEntry.configure(font="TkFixedFont")
                self.FunctionEntry.configure(foreground="#000000")
                self.FunctionEntry.configure(highlightbackground="#d9d9d9")
                self.FunctionEntry.configure(highlightcolor="black")
                self.FunctionEntry.configure(insertbackground="black")
                self.FunctionEntry.configure(selectbackground="#c4c4c4")
                self.FunctionEntry.configure(selectforeground="black")
                self.FunctionEntry.configure(state="disabled")

            # This method is called when the task profile combobox value is changed
            def update_task(self):
                if self.DemandProfileEntry.get() in self.value_list:
                    if self.DemandProfileEntry.get() == 'custom':
                        self.FunctionEntry.configure(state="normal")
                        self.AmplitudeEntry.delete(0, tk.END)
                        self.AmplitudeEntry.configure(state="disabled")
                        self.PeriodEntry.delete(0, tk.END)
                        self.PeriodEntry.configure(state="disabled")
                    elif self.DemandProfileEntry.get() == 'random':
                        self.FunctionEntry.delete(0, tk.END)
                        self.FunctionEntry.configure(state="disabled")
                        self.AmplitudeEntry.configure(state="normal")
                        self.PeriodEntry.delete(0, tk.END)
                        self.PeriodEntry.configure(state="disabled")
                    else:
                        self.FunctionEntry.delete(0, tk.END)
                        self.FunctionEntry.configure(state="disabled")
                        self.AmplitudeEntry.configure(state="normal")
                        self.PeriodEntry.configure(state="normal")
                    return True
                else:
                    return False
            # End of TaskFrame class

        self.top.update_idletasks()
        self.tasks = list()
        for i in range(0, self.numTasks):
            self.tasks.append(TaskFrame(self.ScrolledWindow, self.ScrolledWindow_f, i))

        # code that uses the inner frame dimensions for the scrollbars
        # need to wait on last demand frame to render before creating bbox
        self.tasks[self.numTasks - 1].TaskFrame.wait_visibility()
        bbox = self.ScrolledWindow_f.bbox()
        self.ScrolledWindow.configure(scrollregion=bbox)
        if data is not None:
            self.use_data()
        # validate data by disabling and clearing disallowed entries
        for i in range(0, self.numTasks):
            self.tasks[i].update_task()

    def use_data(self):
        # get list of target profiles and related data for each profile
        if "Target_path" not in self.data or "Path_amplitude" not in self.data or "Path_period" not in self.data or \
                "Range" not in self.data or "Functions" not in self.data:
            messagebox.showinfo(title="Error", message="Test file is missing task data.")
            return
        profiles = self.data["Target_path"].split(",")  # need to trim (might not be num_tasks profiles)
        amplitudes = self.data["Path_amplitude"].split(",")
        periods = self.data["Path_period"].split(",")
        ranges = self.data["Range"].split(",")
        functions = self.data["Functions"].split(",")
        error_list = list()  # a collection of errors encountered while populating this screen
        for task in range(0, self.numTasks):
            if task < len(profiles) and profiles[task].strip(" \t").replace("_", " ") in self.tasks[task].value_list:
                task_profile = profiles[task].strip(" \t").replace("_", " ")
                self.tasks[task].DemandProfileEntry.set(task_profile)
            else:
                # use default value
                task_profile = self.tasks[task].DemandProfileEntry.get()
                error_list.append("Task " + str(task) + " profile missing or invalid.")
            if task < len(ranges):
                try:
                    # check for value error
                    float(ranges[task])
                    self.tasks[task].RangeEntry.delete(0, tk.END)
                    self.tasks[task].RangeEntry.insert(0, ranges[task])
                except ValueError:
                    # use default
                    self.tasks[task].RangeEntry.delete(0, tk.END)
                    self.tasks[task].RangeEntry.insert(0, "10")
                    error_list.append("Task " + str(task) + " has an invalid range.")
            else:
                # use default
                self.tasks[task].RangeEntry.delete(0, tk.END)
                self.tasks[task].RangeEntry.insert(0, "10")
                error_list.append("Task " + str(task) + " has a missing range.")
            if task_profile is not None and task_profile == "custom":
                self.tasks[task].AmplitudeEntry.delete(0, tk.END)
                self.tasks[task].AmplitudeEntry.configure(state="disabled")
                self.tasks[task].PeriodEntry.delete(0, tk.END)
                self.tasks[task].PeriodEntry.configure(state="disabled")
                self.tasks[task].FunctionEntry.configure(state="normal")
                # custom task only needs function
                if len(functions) != 0:
                    task_function = functions.pop(0).strip(" \t")
                    self.tasks[task].FunctionEntry.insert(0, task_function)
                else:
                    error_list.append("Task " + str(task) + " is missing its custom function.")
            else:
                # task is not custom and will need an amplitude (and possibly a period)
                if len(amplitudes) != 0:
                    try:
                        task_amplitude = float(amplitudes.pop(0))
                        self.tasks[task].AmplitudeEntry.delete(0, tk.END)
                        self.tasks[task].AmplitudeEntry.insert(0, str(task_amplitude))
                    except ValueError:
                        self.tasks[task].AmplitudeEntry.delete(0, tk.END)
                        self.tasks[task].AmplitudeEntry.insert(0, "10")
                        error_list.append("Task " + str(task) + " has an invalid amplitude.")
                else:
                    self.tasks[task].AmplitudeEntry.delete(0, tk.END)
                    self.tasks[task].AmplitudeEntry.insert(0, "10")
                    error_list.append("Task " + str(task) + " has a missing amplitude.")
                if task_profile is not None and task_profile not in ["random"] and len(periods) != 0:
                    try:
                        task_period = int(periods.pop(0))
                        self.tasks[task].PeriodEntry.delete(0, tk.END)
                        self.tasks[task].PeriodEntry.insert(0, str(task_period))
                    except ValueError:
                        self.tasks[task].PeriodEntry.delete(0, tk.END)
                        self.tasks[task].PeriodEntry.insert(0, "10")
                        error_list.append("Task " + str(task) + " has an invalid period.")
                elif task_profile in ["random"]:
                    self.tasks[task].PeriodEntry.delete(0, tk.END)
                    self.tasks[task].PeriodEntry.configure(state="disabled")
                else:
                    self.tasks[task].PeriodEntry.delete(0, tk.END)
                    self.tasks[task].PeriodEntry.insert(0, "10")
                    error_list.append("Task " + str(task) + " has a missing period.")
        if len(error_list) != 0:
            errorPopup.ErrorGui(self.top, error_list=error_list, title="Error While Populating Tasks")

    # called when the user clicks the logout button
    def log_out_click(self):
        if messagebox.askokcancel(title="Log Out",
                                  message="Log Out? Any untested data will be lost."):
            self.log_out()

    # called when the user accepts logging out from this or any subsequent window
    def log_out(self):
        self.BaseFrame.destroy()
        if self.next is not None:
            self.next.SwarmFrame.destroy()
            del self.next
        self.next = None
        self.previous.log_out()
        self.previous = None
        del self

    def destroy(self):
        self.BaseFrame.destroy()
        del self

    def go_back(self):
        if messagebox.askokcancel(title="End Test",
                                  message="Delete new test? All new info for this test will be lost."):
            if self.next is not None:
                self.next.destroy()
            self.destroy()

    # Go to the swarm specification page. If it does not exist, create it.
    def to_swarm(self):
        error_list = simSetup.validate_tasks(self.collect_tasks())
        if len(error_list) != 0:
            errorPopup.ErrorGui(top=self.top, error_list=error_list, title="Invalid Task Specification")
        elif self.next is None:
            self.next = statSwarm.SwarmGui(top=self.top, previous=self, home=self.home, data=self.data)
        else:
            self.next.SwarmFrame.tkraise()

    # collect task data into a list for later use
    def collect_tasks(self):
        # this method assumes the tasks are valid, so this is a simple collection
        task_data = list()
        for task in self.tasks:
            task_data.append({"Profile": task.DemandProfileEntry.get(),
                              "Amplitude": task.AmplitudeEntry.get(),
                              "Period": task.PeriodEntry.get(),
                              "Range": task.RangeEntry.get(),
                              "Function": task.FunctionEntry.get()})
        return task_data
