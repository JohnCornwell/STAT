#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jun 14, 2022 05:03:09 PM CDT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from time import time
from tkinter import messagebox
import globals
from GUI import statReview, errorPopup
from GUI.Window import Window
from SimCommunication import simSetup


class SwarmGui(Window):
    def __init__(self, top=None, previous=None, home = None, data=None):
        """This class configures and populates the toplevel Window.
           top is the toplevel containing Window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = 'gray40'  # X11 color: #666666
        _ana2color = 'beige'  # X11 color: #f5f5dc
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=[('selected', _compcolor), ('active', _ana2color)])

        self.top = top
        self.username = globals.username
        self.previous = previous
        self.home = home  # reference to the home screen that is passed to the Results screen after testing
        self.next = None
        self.data = data

        self.SwarmFrame = tk.Frame(self.top)
        self.SwarmFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.SwarmFrame.configure(relief='groove')
        self.SwarmFrame.configure(borderwidth="2")
        self.SwarmFrame.configure(relief="groove")
        self.SwarmFrame.configure(background="#000000")

        self.SwarmPropertiesLabel = tk.Label(self.SwarmFrame)
        self.SwarmPropertiesLabel.place(relx=0.398, rely=0.076, height=40, width=260)
        self.SwarmPropertiesLabel.configure(background="#000000")
        self.SwarmPropertiesLabel.configure(compound='left')
        self.SwarmPropertiesLabel.configure(disabledforeground="#a3a3a3")
        self.SwarmPropertiesLabel.configure(font="-family {Arial} -size 24")
        self.SwarmPropertiesLabel.configure(foreground="#f2b83d")
        self.SwarmPropertiesLabel.configure(text='''Swarm Properties''')

        self.BackButton = tk.Button(self.SwarmFrame)
        self.BackButton.place(relx=0.07, rely=0.822, height=44, width=107)
        self.BackButton.configure(activebackground="#f2b83d")
        self.BackButton.configure(activeforeground="#000000")
        self.BackButton.configure(background="#f2b83d")
        self.BackButton.configure(command=lambda: self.go_back())
        self.BackButton.configure(compound='center')
        self.BackButton.configure(disabledforeground="#a3a3a3")
        self.BackButton.configure(font="-family {Arial} -size 9")
        self.BackButton.configure(foreground="#000000")
        self.BackButton.configure(highlightbackground="#d9d9d9")
        self.BackButton.configure(highlightcolor="black")
        self.BackButton.configure(pady="0")
        self.BackButton.configure(text='''Back''')

        self.NextButton = tk.Button(self.SwarmFrame)
        self.NextButton.place(relx=0.211, rely=0.822, height=44, width=107)
        self.NextButton.configure(activebackground="#f2b83d")
        self.NextButton.configure(activeforeground="#000000")
        self.NextButton.configure(background="#f2b83d")
        self.NextButton.configure(command=lambda: self.go_to_check())
        self.NextButton.configure(compound='center')
        self.NextButton.configure(disabledforeground="#a3a3a3")
        self.NextButton.configure(font="-family {Arial} -size 9")
        self.NextButton.configure(foreground="#000000")
        self.NextButton.configure(highlightbackground="#d9d9d9")
        self.NextButton.configure(highlightcolor="black")
        self.NextButton.configure(pady="0")
        self.NextButton.configure(text='''Next''')

        self.UsernameLabel = tk.Label(self.SwarmFrame)
        self.UsernameLabel.place(relx=0.68, rely=0.015, height=60, width=285)
        self.UsernameLabel.configure(anchor='nw')
        self.UsernameLabel.configure(background="#000000")
        self.UsernameLabel.configure(compound='left')
        self.UsernameLabel.configure(disabledforeground="#a3a3a3")
        self.UsernameLabel.configure(font="-family {Arial} -size 13")
        self.UsernameLabel.configure(foreground="#f2b83d")
        self.UsernameLabel.configure(text='''Logged in as: {}'''.format(self.username))

        self.LogOutButton = tk.Button(self.SwarmFrame)
        self.LogOutButton.place(relx=0.906, rely=0.015, height=44, width=107)
        self.LogOutButton.configure(activebackground="#f2b83d")
        self.LogOutButton.configure(activeforeground="#000000")
        self.LogOutButton.configure(background="#f2b83d")
        self.LogOutButton.configure(command=lambda: self.log_out_click())
        self.LogOutButton.configure(compound='center')
        self.LogOutButton.configure(disabledforeground="#a3a3a3")
        self.LogOutButton.configure(font="-family {Arial} -size 9")
        self.LogOutButton.configure(foreground="#000000")
        self.LogOutButton.configure(highlightbackground="#d9d9d9")
        self.LogOutButton.configure(highlightcolor="black")
        self.LogOutButton.configure(pady="0")
        self.LogOutButton.configure(text='''Log Out''')

        self.PopulationLabel = tk.Label(self.SwarmFrame)
        self.PopulationLabel.place(relx=0.07, rely=0.244, height=31, width=87)
        self.PopulationLabel.configure(activebackground="#f9f9f9")
        self.PopulationLabel.configure(anchor='w')
        self.PopulationLabel.configure(background="#000000")
        self.PopulationLabel.configure(compound='left')
        self.PopulationLabel.configure(disabledforeground="#a3a3a3")
        self.PopulationLabel.configure(font="-family {Arial} -size 13")
        self.PopulationLabel.configure(foreground="#f2b83d")
        self.PopulationLabel.configure(highlightbackground="#d9d9d9")
        self.PopulationLabel.configure(highlightcolor="black")
        self.PopulationLabel.configure(text='''Population''')
        self.tooltip_font = "TkDefaultFont"
        self.PopulationLabel_tooltip = \
            ToolTip(self.PopulationLabel, self.tooltip_font, '''Total swarm agents.''')

        self.ThreshInitLabel = tk.Label(self.SwarmFrame)
        self.ThreshInitLabel.place(relx=0.07, rely=0.32, height=31, width=89)
        self.ThreshInitLabel.configure(activebackground="#f9f9f9")
        self.ThreshInitLabel.configure(anchor='w')
        self.ThreshInitLabel.configure(background="#000000")
        self.ThreshInitLabel.configure(compound='left')
        self.ThreshInitLabel.configure(disabledforeground="#a3a3a3")
        self.ThreshInitLabel.configure(font="-family {Arial} -size 13")
        self.ThreshInitLabel.configure(foreground="#f2b83d")
        self.ThreshInitLabel.configure(highlightbackground="#d9d9d9")
        self.ThreshInitLabel.configure(highlightcolor="black")
        self.ThreshInitLabel.configure(text='''Thresh Init''')
        self.tooltip_font = "TkDefaultFont"
        self.ThreshInitLabel_tooltip = \
            ToolTip(self.ThreshInitLabel, self.tooltip_font, '''How thresholds are initialized for the agents.''')

        self.ThreshDynamicLabel = tk.Label(self.SwarmFrame)
        self.ThreshDynamicLabel.place(relx=0.391, rely=0.624, height=31, width=131)
        self.ThreshDynamicLabel.configure(activebackground="#f9f9f9")
        self.ThreshDynamicLabel.configure(anchor='w')
        self.ThreshDynamicLabel.configure(background="#000000")
        self.ThreshDynamicLabel.configure(compound='left')
        self.ThreshDynamicLabel.configure(disabledforeground="#a3a3a3")
        self.ThreshDynamicLabel.configure(font="-family {Arial} -size 13")
        self.ThreshDynamicLabel.configure(foreground="#f2b83d")
        self.ThreshDynamicLabel.configure(highlightbackground="#d9d9d9")
        self.ThreshDynamicLabel.configure(highlightcolor="black")
        self.ThreshDynamicLabel.configure(text='''Thresh Dynamic''')
        self.tooltip_font = "TkDefaultFont"
        self.ThreshDynamicLabel_tooltip = \
            ToolTip(self.ThreshDynamicLabel, self.tooltip_font, '''Turn on dynamic thresholds and set ranges.''')

        self.ThreshDynamicInitLabel = tk.Label(self.SwarmFrame)
        self.ThreshDynamicInitLabel.place(relx=0.391, rely=0.7, height=31, width=163)
        self.ThreshDynamicInitLabel.configure(activebackground="#f9f9f9")
        self.ThreshDynamicInitLabel.configure(anchor='w')
        self.ThreshDynamicInitLabel.configure(background="#000000")
        self.ThreshDynamicInitLabel.configure(compound='left')
        self.ThreshDynamicInitLabel.configure(disabledforeground="#a3a3a3")
        self.ThreshDynamicInitLabel.configure(font="-family {Arial} -size 13")
        self.ThreshDynamicInitLabel.configure(foreground="#f2b83d")
        self.ThreshDynamicInitLabel.configure(highlightbackground="#d9d9d9")
        self.ThreshDynamicInitLabel.configure(highlightcolor="black")
        self.ThreshDynamicInitLabel.configure(text='''Thresh Dynamic Init''')
        self.tooltip_font = "TkDefaultFont"
        self.ThreshDynamicInitLabel_tooltip = \
            ToolTip(self.ThreshDynamicInitLabel, self.tooltip_font, '''How to initialize thresholds for modes 2 and 3 
            of Thresh Dynamic.''')

        self.ThreshIncreaseLabel = tk.Label(self.SwarmFrame)
        self.ThreshIncreaseLabel.place(relx=0.391, rely=0.776, height=31, width=131)
        self.ThreshIncreaseLabel.configure(activebackground="#f9f9f9")
        self.ThreshIncreaseLabel.configure(anchor='w')
        self.ThreshIncreaseLabel.configure(background="#000000")
        self.ThreshIncreaseLabel.configure(compound='left')
        self.ThreshIncreaseLabel.configure(disabledforeground="#a3a3a3")
        self.ThreshIncreaseLabel.configure(font="-family {Arial} -size 13")
        self.ThreshIncreaseLabel.configure(foreground="#f2b83d")
        self.ThreshIncreaseLabel.configure(highlightbackground="#d9d9d9")
        self.ThreshIncreaseLabel.configure(highlightcolor="black")
        self.ThreshIncreaseLabel.configure(text='''Thresh Increase''')
        self.tooltip_font = "TkDefaultFont"
        self.ThreshIncreaseLabel_tooltip = \
            ToolTip(self.ThreshIncreaseLabel, self.tooltip_font, '''Amount threshold increases when agent does not 
            act on its task.''')

        self.ThreshDecreaseLabel = tk.Label(self.SwarmFrame)
        self.ThreshDecreaseLabel.place(relx=0.391, rely=0.852, height=31, width=140)
        self.ThreshDecreaseLabel.configure(activebackground="#f9f9f9")
        self.ThreshDecreaseLabel.configure(anchor='w')
        self.ThreshDecreaseLabel.configure(background="#000000")
        self.ThreshDecreaseLabel.configure(compound='left')
        self.ThreshDecreaseLabel.configure(disabledforeground="#a3a3a3")
        self.ThreshDecreaseLabel.configure(font="-family {Arial} -size 13")
        self.ThreshDecreaseLabel.configure(foreground="#f2b83d")
        self.ThreshDecreaseLabel.configure(highlightbackground="#d9d9d9")
        self.ThreshDecreaseLabel.configure(highlightcolor="black")
        self.ThreshDecreaseLabel.configure(text='''Thresh Decrease''')
        self.tooltip_font = "TkDefaultFont"
        self.ThreshDecreaseLabel_tooltip = \
            ToolTip(self.ThreshDecreaseLabel, self.tooltip_font, '''Amount threshold decreases when agent does act on 
            its task.''')

        self.ProbCheckLabel = tk.Label(self.SwarmFrame)
        self.ProbCheckLabel.place(relx=0.07, rely=0.472, height=31, width=100)
        self.ProbCheckLabel.configure(activebackground="#f9f9f9")
        self.ProbCheckLabel.configure(anchor='w')
        self.ProbCheckLabel.configure(background="#000000")
        self.ProbCheckLabel.configure(compound='left')
        self.ProbCheckLabel.configure(disabledforeground="#a3a3a3")
        self.ProbCheckLabel.configure(font="-family {Arial} -size 13")
        self.ProbCheckLabel.configure(foreground="#f2b83d")
        self.ProbCheckLabel.configure(highlightbackground="#d9d9d9")
        self.ProbCheckLabel.configure(highlightcolor="black")
        self.ProbCheckLabel.configure(text='''Prob Check''')
        self.tooltip_font = "TkDefaultFont"
        self.ProbCheckLabel_tooltip = \
            ToolTip(self.ProbCheckLabel, self.tooltip_font, '''Probability that agent will stop to reconsider what 
            task to work on.''')

        self.ResponseProbLabel = tk.Label(self.SwarmFrame)
        self.ResponseProbLabel.place(relx=0.07, rely=0.548, height=31, width=139)
        self.ResponseProbLabel.configure(activebackground="#f9f9f9")
        self.ResponseProbLabel.configure(anchor='w')
        self.ResponseProbLabel.configure(background="#000000")
        self.ResponseProbLabel.configure(compound='left')
        self.ResponseProbLabel.configure(disabledforeground="#a3a3a3")
        self.ResponseProbLabel.configure(font="-family {Arial} -size 13")
        self.ResponseProbLabel.configure(foreground="#f2b83d")
        self.ResponseProbLabel.configure(highlightbackground="#d9d9d9")
        self.ResponseProbLabel.configure(highlightcolor="black")
        self.ResponseProbLabel.configure(text='''Response Prob''')
        self.tooltip_font = "TkDefaultFont"
        self.ResponseProbLabel_tooltip = \
            ToolTip(self.ResponseProbLabel, self.tooltip_font, '''Probability that an agent will act on the task it 
            chooses.''')

        self.PopulationEntry = tk.Entry(self.SwarmFrame)
        self.PopulationEntry.place(relx=0.227, rely=0.244, height=20, relwidth=0.066)
        self.PopulationEntry.configure(background="#f2b83d")
        self.PopulationEntry.configure(disabledbackground="#a3a3a3")
        self.PopulationEntry.configure(font="-family {Arial} -size 10")
        self.PopulationEntry.configure(foreground="#000000")
        self.PopulationEntry.configure(insertbackground="black")
        self.PopulationEntry.configure(justify='right')

        self.ThreshIncreaseEntry = tk.Entry(self.SwarmFrame)
        self.ThreshIncreaseEntry.place(relx=0.539, rely=0.776, height=20, relwidth=0.066)
        self.ThreshIncreaseEntry.configure(background="#f2b83d")
        self.ThreshIncreaseEntry.configure(disabledbackground="#a3a3a3")
        self.ThreshIncreaseEntry.configure(font="-family {Arial} -size 10")
        self.ThreshIncreaseEntry.configure(foreground="#000000")
        self.ThreshIncreaseEntry.configure(insertbackground="black")
        self.ThreshIncreaseEntry.configure(justify='right')

        self.ThreshDecreaseEntry = tk.Entry(self.SwarmFrame)
        self.ThreshDecreaseEntry.place(relx=0.539, rely=0.852, height=20, relwidth=0.066)
        self.ThreshDecreaseEntry.configure(background="#f2b83d")
        self.ThreshDecreaseEntry.configure(disabledbackground="#a3a3a3")
        self.ThreshDecreaseEntry.configure(font="-family {Arial} -size 10")
        self.ThreshDecreaseEntry.configure(foreground="#000000")
        self.ThreshDecreaseEntry.configure(insertbackground="black")
        self.ThreshDecreaseEntry.configure(justify='right')

        self.ProbCheckEntry = tk.Entry(self.SwarmFrame)
        self.ProbCheckEntry.place(relx=0.227, rely=0.472, height=20, relwidth=0.066)
        self.ProbCheckEntry.configure(background="#f2b83d")
        self.ProbCheckEntry.configure(disabledbackground="#a3a3a3")
        self.ProbCheckEntry.configure(font="-family {Arial} -size 10")
        self.ProbCheckEntry.configure(foreground="#000000")
        self.ProbCheckEntry.configure(insertbackground="black")
        self.ProbCheckEntry.configure(justify='right')

        self.ResponseProbEntry = tk.Entry(self.SwarmFrame)
        self.ResponseProbEntry.place(relx=0.227, rely=0.548, height=20, relwidth=0.066)
        self.ResponseProbEntry.configure(background="#f2b83d")
        self.ResponseProbEntry.configure(disabledbackground="#a3a3a3")
        self.ResponseProbEntry.configure(font="-family {Arial} -size 10")
        self.ResponseProbEntry.configure(foreground="#000000")
        self.ResponseProbEntry.configure(insertbackground="black")
        self.ResponseProbEntry.configure(justify='right')

        self.TaskSelectionEntry = ttk.Combobox(self.SwarmFrame)
        self.TaskSelectionEntry.place(relx=0.227, rely=0.396, relheight=0.032, relwidth=0.066)
        self.value_list = ['Random', 'Urgent', ]
        self.TaskSelectionEntry.configure(values=self.value_list)
        self.TaskSelectionEntry.configure(font="-family {Arial} -size 9")
        self.TaskSelectionEntry.configure(background="#f2b83d")
        self.TaskSelectionEntry.configure(takefocus="")
        self.TaskSelectionEntry.configure(state="readonly")

        self.ThreshInitEntry = tk.Entry(self.SwarmFrame)
        self.ThreshInitEntry.place(relx=0.227, rely=0.32, height=20, relwidth=0.066)
        self.ThreshInitEntry.configure(background="#f2b83d")
        self.ThreshInitEntry.configure(disabledbackground="#a3a3a3")
        self.ThreshInitEntry.configure(font="-family {Arial} -size 10")
        self.ThreshInitEntry.configure(foreground="#000000")
        self.ThreshInitEntry.configure(insertbackground="black")
        self.ThreshInitEntry.configure(justify='right')

        self.TaskSelectionLabel = tk.Label(self.SwarmFrame)
        self.TaskSelectionLabel.place(relx=0.07, rely=0.396, height=31, width=130)
        self.TaskSelectionLabel.configure(activebackground="#f9f9f9")
        self.TaskSelectionLabel.configure(anchor='w')
        self.TaskSelectionLabel.configure(background="#000000")
        self.TaskSelectionLabel.configure(compound='left')
        self.TaskSelectionLabel.configure(disabledforeground="#a3a3a3")
        self.TaskSelectionLabel.configure(font="-family {Arial} -size 13")
        self.TaskSelectionLabel.configure(foreground="#f2b83d")
        self.TaskSelectionLabel.configure(highlightbackground="#d9d9d9")
        self.TaskSelectionLabel.configure(highlightcolor="black")
        self.TaskSelectionLabel.configure(text='''Task Selection''')
        self.tooltip_font = "TkDefaultFont"
        self.TaskSelectionLabel_tooltip = \
            ToolTip(self.TaskSelectionLabel, self.tooltip_font, '''How agent selects task if more than one task 
            stimulus falls under the agent's corresponding threshold.''')

        self.IntensityVariationLabel = tk.Label(self.SwarmFrame)
        self.IntensityVariationLabel.place(relx=0.391, rely=0.244, height=31, width=149)
        self.IntensityVariationLabel.configure(activebackground="#f9f9f9")
        self.IntensityVariationLabel.configure(anchor='w')
        self.IntensityVariationLabel.configure(background="#000000")
        self.IntensityVariationLabel.configure(compound='left')
        self.IntensityVariationLabel.configure(disabledforeground="#a3a3a3")
        self.IntensityVariationLabel.configure(font="-family {Arial} -size 13")
        self.IntensityVariationLabel.configure(foreground="#f2b83d")
        self.IntensityVariationLabel.configure(highlightbackground="#d9d9d9")
        self.IntensityVariationLabel.configure(highlightcolor="black")
        self.IntensityVariationLabel.configure(text='''Intensity Variation''')
        self.tooltip_font = "TkDefaultFont"
        self.IntensityVariationLabel_tooltip = \
            ToolTip(self.IntensityVariationLabel, self.tooltip_font, '''Allows the agent to specialize in a task they 
            choose often.''')

        self.IntensityVariationEntry = ttk.Combobox(self.SwarmFrame)
        self.IntensityVariationEntry.place(relx=0.539, rely=0.244, relheight=0.032, relwidth=0.066)
        self.value_list = ['Off', 'Share Range', 'Individual Range']
        self.IntensityVariationEntry.configure(values=self.value_list)
        self.IntensityVariationEntry.configure(font="-family {Arial} -size 9")
        self.IntensityVariationEntry.configure(background="#f2b83d")
        self.IntensityVariationEntry.configure(takefocus="")
        self.IntensityVariationEntry.configure(validate="focusin")
        self.IntensityVariationEntry.configure(validatecommand=lambda: self.update_iv())
        self.IntensityVariationEntry.configure(state="readonly")

        self.AgingMinLabel = tk.Label(self.SwarmFrame)
        self.AgingMinLabel.place(relx=0.391, rely=0.32, height=31, width=90)
        self.AgingMinLabel.configure(activebackground="#f9f9f9")
        self.AgingMinLabel.configure(anchor='w')
        self.AgingMinLabel.configure(background="#000000")
        self.AgingMinLabel.configure(compound='left')
        self.AgingMinLabel.configure(disabledforeground="#a3a3a3")
        self.AgingMinLabel.configure(font="-family {Arial} -size 13")
        self.AgingMinLabel.configure(foreground="#f2b83d")
        self.AgingMinLabel.configure(highlightbackground="#d9d9d9")
        self.AgingMinLabel.configure(highlightcolor="black")
        self.AgingMinLabel.configure(text='''Aging Min''')
        self.tooltip_font = "TkDefaultFont"
        self.AgingMinLabel_tooltip = \
            ToolTip(self.AgingMinLabel, self.tooltip_font, '''Minimum amount an agent can specialize.''')

        self.AgingMinEntry = tk.Entry(self.SwarmFrame)
        self.AgingMinEntry.place(relx=0.539, rely=0.32, height=20, relwidth=0.066)
        self.AgingMinEntry.configure(background="#f2b83d")
        self.AgingMinEntry.configure(disabledbackground="#a3a3a3")
        self.AgingMinEntry.configure(font="-family {Arial} -size 10")
        self.AgingMinEntry.configure(foreground="#000000")
        self.AgingMinEntry.configure(highlightbackground="#d9d9d9")
        self.AgingMinEntry.configure(highlightcolor="black")
        self.AgingMinEntry.configure(insertbackground="black")
        self.AgingMinEntry.configure(justify='right')
        self.AgingMinEntry.configure(selectbackground="#c4c4c4")
        self.AgingMinEntry.configure(selectforeground="black")

        self.AgingMaxLabel = tk.Label(self.SwarmFrame)
        self.AgingMaxLabel.place(relx=0.391, rely=0.396, height=31, width=109)
        self.AgingMaxLabel.configure(activebackground="#f9f9f9")
        self.AgingMaxLabel.configure(anchor='w')
        self.AgingMaxLabel.configure(background="#000000")
        self.AgingMaxLabel.configure(compound='left')
        self.AgingMaxLabel.configure(disabledforeground="#a3a3a3")
        self.AgingMaxLabel.configure(font="-family {Arial} -size 13")
        self.AgingMaxLabel.configure(foreground="#f2b83d")
        self.AgingMaxLabel.configure(highlightbackground="#d9d9d9")
        self.AgingMaxLabel.configure(highlightcolor="black")
        self.AgingMaxLabel.configure(text='''Aging Max''')
        self.tooltip_font = "TkDefaultFont"
        self.AgingMaxLabel_tooltip = \
            ToolTip(self.AgingMaxLabel, self.tooltip_font, '''Maximum amount an agent can specialize.''')

        self.AgingMaxEntry = tk.Entry(self.SwarmFrame)
        self.AgingMaxEntry.place(relx=0.539, rely=0.396, height=20, relwidth=0.066)
        self.AgingMaxEntry.configure(background="#f2b83d")
        self.AgingMaxEntry.configure(disabledbackground="#a3a3a3")
        self.AgingMaxEntry.configure(font="-family {Arial} -size 10")
        self.AgingMaxEntry.configure(foreground="#000000")
        self.AgingMaxEntry.configure(highlightbackground="#d9d9d9")
        self.AgingMaxEntry.configure(highlightcolor="black")
        self.AgingMaxEntry.configure(insertbackground="black")
        self.AgingMaxEntry.configure(justify='right')
        self.AgingMaxEntry.configure(selectbackground="#c4c4c4")
        self.AgingMaxEntry.configure(selectforeground="black")

        self.AgingUpLabel = tk.Label(self.SwarmFrame)
        self.AgingUpLabel.place(relx=0.391, rely=0.472, height=31, width=90)
        self.AgingUpLabel.configure(activebackground="#f9f9f9")
        self.AgingUpLabel.configure(anchor='w')
        self.AgingUpLabel.configure(background="#000000")
        self.AgingUpLabel.configure(compound='left')
        self.AgingUpLabel.configure(disabledforeground="#a3a3a3")
        self.AgingUpLabel.configure(font="-family {Arial} -size 13")
        self.AgingUpLabel.configure(foreground="#f2b83d")
        self.AgingUpLabel.configure(highlightbackground="#d9d9d9")
        self.AgingUpLabel.configure(highlightcolor="black")
        self.AgingUpLabel.configure(text='''Aging Up''')
        self.tooltip_font = "TkDefaultFont"
        self.AgingUpLabel_tooltip = \
            ToolTip(self.AgingUpLabel, self.tooltip_font, '''Learning factor for specialization.''')

        self.AgingUpEntry = tk.Entry(self.SwarmFrame)
        self.AgingUpEntry.place(relx=0.539, rely=0.472, height=20, relwidth=0.066)
        self.AgingUpEntry.configure(background="#f2b83d")
        self.AgingUpEntry.configure(disabledbackground="#a3a3a3")
        self.AgingUpEntry.configure(font="-family {Arial} -size 10")
        self.AgingUpEntry.configure(foreground="#000000")
        self.AgingUpEntry.configure(highlightbackground="#d9d9d9")
        self.AgingUpEntry.configure(highlightcolor="black")
        self.AgingUpEntry.configure(insertbackground="black")
        self.AgingUpEntry.configure(justify='right')
        self.AgingUpEntry.configure(selectbackground="#c4c4c4")
        self.AgingUpEntry.configure(selectforeground="black")

        self.AgingDownLabel = tk.Label(self.SwarmFrame)
        self.AgingDownLabel.place(relx=0.391, rely=0.548, height=31, width=109)
        self.AgingDownLabel.configure(activebackground="#f9f9f9")
        self.AgingDownLabel.configure(anchor='w')
        self.AgingDownLabel.configure(background="#000000")
        self.AgingDownLabel.configure(compound='left')
        self.AgingDownLabel.configure(disabledforeground="#a3a3a3")
        self.AgingDownLabel.configure(font="-family {Arial} -size 13")
        self.AgingDownLabel.configure(foreground="#f2b83d")
        self.AgingDownLabel.configure(highlightbackground="#d9d9d9")
        self.AgingDownLabel.configure(highlightcolor="black")
        self.AgingDownLabel.configure(text='''Aging Down''')
        self.tooltip_font = "TkDefaultFont"
        self.AgingDownLabel_tooltip = \
            ToolTip(self.AgingDownLabel, self.tooltip_font, '''Forgetting factor for specialization.''')

        self.AgingDownEntry = tk.Entry(self.SwarmFrame)
        self.AgingDownEntry.place(relx=0.539, rely=0.548, height=20, relwidth=0.066)
        self.AgingDownEntry.configure(background="#f2b83d")
        self.AgingDownEntry.configure(disabledbackground="#a3a3a3")
        self.AgingDownEntry.configure(font="-family {Arial} -size 10")
        self.AgingDownEntry.configure(foreground="#000000")
        self.AgingDownEntry.configure(highlightbackground="#d9d9d9")
        self.AgingDownEntry.configure(highlightcolor="black")
        self.AgingDownEntry.configure(insertbackground="black")
        self.AgingDownEntry.configure(justify='right')
        self.AgingDownEntry.configure(selectbackground="#c4c4c4")
        self.AgingDownEntry.configure(selectforeground="black")

        self.KillNumberLabel = tk.Label(self.SwarmFrame)
        self.KillNumberLabel.place(relx=0.695, rely=0.7, height=31, width=102)
        self.KillNumberLabel.configure(activebackground="#f9f9f9")
        self.KillNumberLabel.configure(anchor='w')
        self.KillNumberLabel.configure(background="#000000")
        self.KillNumberLabel.configure(compound='left')
        self.KillNumberLabel.configure(disabledforeground="#a3a3a3")
        self.KillNumberLabel.configure(font="-family {Arial} -size 13")
        self.KillNumberLabel.configure(foreground="#f2b83d")
        self.KillNumberLabel.configure(highlightbackground="#d9d9d9")
        self.KillNumberLabel.configure(highlightcolor="black")
        self.KillNumberLabel.configure(text='''Kill Number''')
        self.tooltip_font = "TkDefaultFont"
        self.KillNumberLabel_tooltip = \
            ToolTip(self.KillNumberLabel, self.tooltip_font, '''Number of agents to remove per extinction.''')

        self.KillNumberEntry = tk.Entry(self.SwarmFrame)
        self.KillNumberEntry.place(relx=0.867, rely=0.7, height=20, relwidth=0.066)
        self.KillNumberEntry.configure(background="#f2b83d")
        self.KillNumberEntry.configure(disabledbackground="#a3a3a3")
        self.KillNumberEntry.configure(font="-family {Arial} -size 10")
        self.KillNumberEntry.configure(foreground="#000000")
        self.KillNumberEntry.configure(highlightbackground="#d9d9d9")
        self.KillNumberEntry.configure(highlightcolor="black")
        self.KillNumberEntry.configure(insertbackground="black")
        self.KillNumberEntry.configure(justify='right')
        self.KillNumberEntry.configure(selectbackground="#c4c4c4")
        self.KillNumberEntry.configure(selectforeground="black")

        self.FirstExtinctionLabel = tk.Label(self.SwarmFrame)
        self.FirstExtinctionLabel.place(relx=0.695, rely=0.776, height=31, width=121)
        self.FirstExtinctionLabel.configure(activebackground="#f9f9f9")
        self.FirstExtinctionLabel.configure(anchor='w')
        self.FirstExtinctionLabel.configure(background="#000000")
        self.FirstExtinctionLabel.configure(compound='left')
        self.FirstExtinctionLabel.configure(disabledforeground="#a3a3a3")
        self.FirstExtinctionLabel.configure(font="-family {Arial} -size 13")
        self.FirstExtinctionLabel.configure(foreground="#f2b83d")
        self.FirstExtinctionLabel.configure(highlightbackground="#d9d9d9")
        self.FirstExtinctionLabel.configure(highlightcolor="black")
        self.FirstExtinctionLabel.configure(text='''First Extinction''')
        self.tooltip_font = "TkDefaultFont"
        self.FirstExtinctionLabel_tooltip = \
            ToolTip(self.FirstExtinctionLabel, self.tooltip_font, '''Timestep of the first extinction.''')

        self.FirstExtinctionEntry = tk.Entry(self.SwarmFrame)
        self.FirstExtinctionEntry.place(relx=0.867, rely=0.776, height=20, relwidth=0.066)
        self.FirstExtinctionEntry.configure(background="#f2b83d")
        self.FirstExtinctionEntry.configure(disabledbackground="#a3a3a3")
        self.FirstExtinctionEntry.configure(font="-family {Arial} -size 10")
        self.FirstExtinctionEntry.configure(foreground="#000000")
        self.FirstExtinctionEntry.configure(highlightbackground="#d9d9d9")
        self.FirstExtinctionEntry.configure(highlightcolor="black")
        self.FirstExtinctionEntry.configure(insertbackground="black")
        self.FirstExtinctionEntry.configure(justify='right')
        self.FirstExtinctionEntry.configure(selectbackground="#c4c4c4")
        self.FirstExtinctionEntry.configure(selectforeground="black")

        self.ExtinctionPeriodLabel = tk.Label(self.SwarmFrame)
        self.ExtinctionPeriodLabel.place(relx=0.695, rely=0.852, height=31, width=130)
        self.ExtinctionPeriodLabel.configure(activebackground="#f9f9f9")
        self.ExtinctionPeriodLabel.configure(anchor='w')
        self.ExtinctionPeriodLabel.configure(background="#000000")
        self.ExtinctionPeriodLabel.configure(compound='left')
        self.ExtinctionPeriodLabel.configure(disabledforeground="#a3a3a3")
        self.ExtinctionPeriodLabel.configure(font="-family {Arial} -size 13")
        self.ExtinctionPeriodLabel.configure(foreground="#f2b83d")
        self.ExtinctionPeriodLabel.configure(highlightbackground="#d9d9d9")
        self.ExtinctionPeriodLabel.configure(highlightcolor="black")
        self.ExtinctionPeriodLabel.configure(text='''Extinction Period''')
        self.tooltip_font = "TkDefaultFont"
        self.ExtinctionPeriodLabel_tooltip = \
            ToolTip(self.ExtinctionPeriodLabel, self.tooltip_font, '''Number of timesteps between extinctions.''')

        self.ExtinctionPeriodEntry = tk.Entry(self.SwarmFrame)
        self.ExtinctionPeriodEntry.place(relx=0.867, rely=0.852, height=20, relwidth=0.066)
        self.ExtinctionPeriodEntry.configure(background="#f2b83d")
        self.ExtinctionPeriodEntry.configure(disabledbackground="#a3a3a3")
        self.ExtinctionPeriodEntry.configure(font="-family {Arial} -size 10")
        self.ExtinctionPeriodEntry.configure(foreground="#000000")
        self.ExtinctionPeriodEntry.configure(highlightbackground="#d9d9d9")
        self.ExtinctionPeriodEntry.configure(highlightcolor="black")
        self.ExtinctionPeriodEntry.configure(insertbackground="black")
        self.ExtinctionPeriodEntry.configure(justify='right')
        self.ExtinctionPeriodEntry.configure(selectbackground="#c4c4c4")
        self.ExtinctionPeriodEntry.configure(selectforeground="black")

        self.SpontaneousResponseLabel = tk.Label(self.SwarmFrame)
        self.SpontaneousResponseLabel.place(relx=0.07, rely=0.624, height=31, width=200)
        self.SpontaneousResponseLabel.configure(activebackground="#f9f9f9")
        self.SpontaneousResponseLabel.configure(anchor='w')
        self.SpontaneousResponseLabel.configure(background="#000000")
        self.SpontaneousResponseLabel.configure(compound='left')
        self.SpontaneousResponseLabel.configure(disabledforeground="#a3a3a3")
        self.SpontaneousResponseLabel.configure(font="-family {Arial} -size 13")
        self.SpontaneousResponseLabel.configure(foreground="#f2b83d")
        self.SpontaneousResponseLabel.configure(highlightbackground="#d9d9d9")
        self.SpontaneousResponseLabel.configure(highlightcolor="black")
        self.SpontaneousResponseLabel.configure(text='''Spontaneous Response''')
        self.tooltip_font = "TkDefaultFont"
        self.SpontaneousResponseLabel_tooltip = \
            ToolTip(self.SpontaneousResponseLabel, self.tooltip_font, '''Probability that an agent will act when no 
            task is chosen.''')

        self.SpontaneousResponseEntry = tk.Entry(self.SwarmFrame)
        self.SpontaneousResponseEntry.place(relx=0.227, rely=0.624, height=20, relwidth=0.066)
        self.SpontaneousResponseEntry.configure(background="#f2b83d")
        self.SpontaneousResponseEntry.configure(disabledbackground="#a3a3a3")
        self.SpontaneousResponseEntry.configure(font="-family {Arial} -size 10")
        self.SpontaneousResponseEntry.configure(foreground="#000000")
        self.SpontaneousResponseEntry.configure(highlightbackground="#d9d9d9")
        self.SpontaneousResponseEntry.configure(highlightcolor="black")
        self.SpontaneousResponseEntry.configure(insertbackground="black")
        self.SpontaneousResponseEntry.configure(justify='right')
        self.SpontaneousResponseEntry.configure(selectbackground="#c4c4c4")
        self.SpontaneousResponseEntry.configure(selectforeground="black")

        self.AdvancedLabel = tk.Label(self.SwarmFrame)
        self.AdvancedLabel.place(relx=0.391, rely=0.183, height=22, width=113)
        self.AdvancedLabel.configure(activebackground="#f9f9f9")
        self.AdvancedLabel.configure(anchor='w')
        self.AdvancedLabel.configure(background="#000000")
        self.AdvancedLabel.configure(compound='left')
        self.AdvancedLabel.configure(disabledforeground="#a3a3a3")
        self.AdvancedLabel.configure(font="-family {Arial} -size 17")
        self.AdvancedLabel.configure(foreground="#f2b83d")
        self.AdvancedLabel.configure(highlightbackground="#d9d9d9")
        self.AdvancedLabel.configure(highlightcolor="black")
        self.AdvancedLabel.configure(text='''Advanced''')

        self.CoreLabel = tk.Label(self.SwarmFrame)
        self.CoreLabel.place(relx=0.07, rely=0.183, height=21, width=61)
        self.CoreLabel.configure(activebackground="#f9f9f9")
        self.CoreLabel.configure(anchor='w')
        self.CoreLabel.configure(background="#000000")
        self.CoreLabel.configure(compound='left')
        self.CoreLabel.configure(disabledforeground="#a3a3a3")
        self.CoreLabel.configure(font="-family {Arial} -size 17")
        self.CoreLabel.configure(foreground="#f2b83d")
        self.CoreLabel.configure(highlightbackground="#d9d9d9")
        self.CoreLabel.configure(highlightcolor="black")
        self.CoreLabel.configure(text='''Core''')

        self.HeteroRangeMaxLabel = tk.Label(self.SwarmFrame)
        self.HeteroRangeMaxLabel.place(relx=0.695, rely=0.244, height=31, width=153)
        self.HeteroRangeMaxLabel.configure(activebackground="#f9f9f9")
        self.HeteroRangeMaxLabel.configure(anchor='w')
        self.HeteroRangeMaxLabel.configure(background="#000000")
        self.HeteroRangeMaxLabel.configure(compound='left')
        self.HeteroRangeMaxLabel.configure(disabledforeground="#a3a3a3")
        self.HeteroRangeMaxLabel.configure(font="-family {Arial} -size 13")
        self.HeteroRangeMaxLabel.configure(foreground="#f2b83d")
        self.HeteroRangeMaxLabel.configure(highlightbackground="#d9d9d9")
        self.HeteroRangeMaxLabel.configure(highlightcolor="black")
        self.HeteroRangeMaxLabel.configure(text='''Hetero Range Max''')
        self.tooltip_font = "TkDefaultFont"
        self.HeteroRangeMaxLabel_tooltip = \
            ToolTip(self.HeteroRangeMaxLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.HeteroRangeMaxEntry = tk.Entry(self.SwarmFrame)
        self.HeteroRangeMaxEntry.place(relx=0.867, rely=0.244, height=20, relwidth=0.066)
        self.HeteroRangeMaxEntry.configure(background="#f2b83d")
        self.HeteroRangeMaxEntry.configure(disabledbackground="#a3a3a3")
        self.HeteroRangeMaxEntry.configure(font="-family {Arial} -size 10")
        self.HeteroRangeMaxEntry.configure(foreground="#000000")
        self.HeteroRangeMaxEntry.configure(highlightbackground="#d9d9d9")
        self.HeteroRangeMaxEntry.configure(highlightcolor="black")
        self.HeteroRangeMaxEntry.configure(insertbackground="black")
        self.HeteroRangeMaxEntry.configure(justify='right')
        self.HeteroRangeMaxEntry.configure(selectbackground="#c4c4c4")
        self.HeteroRangeMaxEntry.configure(selectforeground="black")

        self.HeteroRangeMinLabel = tk.Label(self.SwarmFrame)
        self.HeteroRangeMinLabel.place(relx=0.695, rely=0.32, height=31, width=144)
        self.HeteroRangeMinLabel.configure(activebackground="#f9f9f9")
        self.HeteroRangeMinLabel.configure(anchor='w')
        self.HeteroRangeMinLabel.configure(background="#000000")
        self.HeteroRangeMinLabel.configure(compound='left')
        self.HeteroRangeMinLabel.configure(disabledforeground="#a3a3a3")
        self.HeteroRangeMinLabel.configure(font="-family {Arial} -size 13")
        self.HeteroRangeMinLabel.configure(foreground="#f2b83d")
        self.HeteroRangeMinLabel.configure(highlightbackground="#d9d9d9")
        self.HeteroRangeMinLabel.configure(highlightcolor="black")
        self.HeteroRangeMinLabel.configure(text='''Hetero Range Min''')
        self.tooltip_font = "TkDefaultFont"
        self.HeteroRangeMinLabel_tooltip = \
            ToolTip(self.HeteroRangeMinLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.HeteroRangeMinEntry = tk.Entry(self.SwarmFrame)
        self.HeteroRangeMinEntry.place(relx=0.867, rely=0.32, height=20, relwidth=0.066)
        self.HeteroRangeMinEntry.configure(background="#f2b83d")
        self.HeteroRangeMinEntry.configure(disabledbackground="#a3a3a3")
        self.HeteroRangeMinEntry.configure(font="-family {Arial} -size 10")
        self.HeteroRangeMinEntry.configure(foreground="#000000")
        self.HeteroRangeMinEntry.configure(highlightbackground="#d9d9d9")
        self.HeteroRangeMinEntry.configure(highlightcolor="black")
        self.HeteroRangeMinEntry.configure(insertbackground="black")
        self.HeteroRangeMinEntry.configure(justify='right')
        self.HeteroRangeMinEntry.configure(selectbackground="#c4c4c4")
        self.HeteroRangeMinEntry.configure(selectforeground="black")

        self.HeteroRadiusMaxLabel = tk.Label(self.SwarmFrame)
        self.HeteroRadiusMaxLabel.place(relx=0.695, rely=0.396, height=31, width=153)
        self.HeteroRadiusMaxLabel.configure(activebackground="#f9f9f9")
        self.HeteroRadiusMaxLabel.configure(anchor='w')
        self.HeteroRadiusMaxLabel.configure(background="#000000")
        self.HeteroRadiusMaxLabel.configure(compound='left')
        self.HeteroRadiusMaxLabel.configure(disabledforeground="#a3a3a3")
        self.HeteroRadiusMaxLabel.configure(font="-family {Arial} -size 13")
        self.HeteroRadiusMaxLabel.configure(foreground="#f2b83d")
        self.HeteroRadiusMaxLabel.configure(highlightbackground="#d9d9d9")
        self.HeteroRadiusMaxLabel.configure(highlightcolor="black")
        self.HeteroRadiusMaxLabel.configure(text='''Hetero Radius Max''')
        self.tooltip_font = "TkDefaultFont"
        self.HeteroRadiusMaxLabel_tooltip = \
            ToolTip(self.HeteroRadiusMaxLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.HeteroRadiusMaxEntry = tk.Entry(self.SwarmFrame)
        self.HeteroRadiusMaxEntry.place(relx=0.867, rely=0.396, height=20, relwidth=0.066)
        self.HeteroRadiusMaxEntry.configure(background="#f2b83d")
        self.HeteroRadiusMaxEntry.configure(disabledbackground="#a3a3a3")
        self.HeteroRadiusMaxEntry.configure(font="-family {Arial} -size 10")
        self.HeteroRadiusMaxEntry.configure(foreground="#000000")
        self.HeteroRadiusMaxEntry.configure(highlightbackground="#d9d9d9")
        self.HeteroRadiusMaxEntry.configure(highlightcolor="black")
        self.HeteroRadiusMaxEntry.configure(insertbackground="black")
        self.HeteroRadiusMaxEntry.configure(justify='right')
        self.HeteroRadiusMaxEntry.configure(selectbackground="#c4c4c4")
        self.HeteroRadiusMaxEntry.configure(selectforeground="black")

        self.HeteroRadiusMinLabel = tk.Label(self.SwarmFrame)
        self.HeteroRadiusMinLabel.place(relx=0.695, rely=0.472, height=31, width=153)
        self.HeteroRadiusMinLabel.configure(activebackground="#f9f9f9")
        self.HeteroRadiusMinLabel.configure(anchor='w')
        self.HeteroRadiusMinLabel.configure(background="#000000")
        self.HeteroRadiusMinLabel.configure(compound='left')
        self.HeteroRadiusMinLabel.configure(disabledforeground="#a3a3a3")
        self.HeteroRadiusMinLabel.configure(font="-family {Arial} -size 13")
        self.HeteroRadiusMinLabel.configure(foreground="#f2b83d")
        self.HeteroRadiusMinLabel.configure(highlightbackground="#d9d9d9")
        self.HeteroRadiusMinLabel.configure(highlightcolor="black")
        self.HeteroRadiusMinLabel.configure(text='''Hetero Radius Min''')
        self.tooltip_font = "TkDefaultFont"
        self.HeteroRadiusMinLabel_tooltip = \
            ToolTip(self.HeteroRadiusMinLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.HeteroRadiusMinEntry = tk.Entry(self.SwarmFrame)
        self.HeteroRadiusMinEntry.place(relx=0.867, rely=0.472, height=20, relwidth=0.066)
        self.HeteroRadiusMinEntry.configure(background="#f2b83d")
        self.HeteroRadiusMinEntry.configure(disabledbackground="#a3a3a3")
        self.HeteroRadiusMinEntry.configure(font="-family {Arial} -size 10")
        self.HeteroRadiusMinEntry.configure(foreground="#000000")
        self.HeteroRadiusMinEntry.configure(highlightbackground="#d9d9d9")
        self.HeteroRadiusMinEntry.configure(highlightcolor="black")
        self.HeteroRadiusMinEntry.configure(insertbackground="black")
        self.HeteroRadiusMinEntry.configure(justify='right')
        self.HeteroRadiusMinEntry.configure(selectbackground="#c4c4c4")
        self.HeteroRadiusMinEntry.configure(selectforeground="black")

        self.GaussianMuLabel = tk.Label(self.SwarmFrame)
        self.GaussianMuLabel.place(relx=0.695, rely=0.548, height=31, width=153)
        self.GaussianMuLabel.configure(activebackground="#f9f9f9")
        self.GaussianMuLabel.configure(anchor='w')
        self.GaussianMuLabel.configure(background="#000000")
        self.GaussianMuLabel.configure(compound='left')
        self.GaussianMuLabel.configure(disabledforeground="#a3a3a3")
        self.GaussianMuLabel.configure(font="-family {Arial} -size 13")
        self.GaussianMuLabel.configure(foreground="#f2b83d")
        self.GaussianMuLabel.configure(highlightbackground="#d9d9d9")
        self.GaussianMuLabel.configure(highlightcolor="black")
        self.GaussianMuLabel.configure(text='''RP Gaussian MU''')
        self.tooltip_font = "TkDefaultFont"
        self.GaussianMuLabel_tooltip = \
            ToolTip(self.GaussianMuLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.GaussianMuEntry = tk.Entry(self.SwarmFrame)
        self.GaussianMuEntry.place(relx=0.867, rely=0.548, height=20, relwidth=0.066)
        self.GaussianMuEntry.configure(background="#f2b83d")
        self.GaussianMuEntry.configure(disabledbackground="#a3a3a3")
        self.GaussianMuEntry.configure(font="-family {Arial} -size 10")
        self.GaussianMuEntry.configure(foreground="#000000")
        self.GaussianMuEntry.configure(highlightbackground="#d9d9d9")
        self.GaussianMuEntry.configure(highlightcolor="black")
        self.GaussianMuEntry.configure(insertbackground="black")
        self.GaussianMuEntry.configure(justify='right')
        self.GaussianMuEntry.configure(selectbackground="#c4c4c4")
        self.GaussianMuEntry.configure(selectforeground="black")

        self.GaussianStdLabel = tk.Label(self.SwarmFrame)
        self.GaussianStdLabel.place(relx=0.695, rely=0.624, height=31, width=153)
        self.GaussianStdLabel.configure(activebackground="#f9f9f9")
        self.GaussianStdLabel.configure(anchor='w')
        self.GaussianStdLabel.configure(background="#000000")
        self.GaussianStdLabel.configure(compound='left')
        self.GaussianStdLabel.configure(disabledforeground="#a3a3a3")
        self.GaussianStdLabel.configure(font="-family {Arial} -size 13")
        self.GaussianStdLabel.configure(foreground="#f2b83d")
        self.GaussianStdLabel.configure(highlightbackground="#d9d9d9")
        self.GaussianStdLabel.configure(highlightcolor="black")
        self.GaussianStdLabel.configure(text='''RP Gaussian STD''')
        self.tooltip_font = "TkDefaultFont"
        self.GaussianStdLabel_tooltip = \
            ToolTip(self.GaussianStdLabel, self.tooltip_font, '''Spontaneous Response Probability''')

        self.GaussianStdEntry = tk.Entry(self.SwarmFrame)
        self.GaussianStdEntry.place(relx=0.867, rely=0.624, height=20, relwidth=0.066)
        self.GaussianStdEntry.configure(background="#f2b83d")
        self.GaussianStdEntry.configure(disabledbackground="#a3a3a3")
        self.GaussianStdEntry.configure(font="-family {Arial} -size 10")
        self.GaussianStdEntry.configure(foreground="#000000")
        self.GaussianStdEntry.configure(highlightbackground="#d9d9d9")
        self.GaussianStdEntry.configure(highlightcolor="black")
        self.GaussianStdEntry.configure(insertbackground="black")
        self.GaussianStdEntry.configure(justify='right')
        self.GaussianStdEntry.configure(selectbackground="#c4c4c4")
        self.GaussianStdEntry.configure(selectforeground="black")

        self.ThreshDyInitEntry = ttk.Combobox(self.SwarmFrame)
        self.ThreshDyInitEntry.place(relx=0.539, rely=0.7, relheight=0.032, relwidth=0.066)
        self.ThreshDyInitEntry.configure(values=['0', '1', '2'])
        self.ThreshDyInitEntry.configure(font="-family {Arial} -size 9")
        self.ThreshDyInitEntry.configure(background="#f2b83d")
        self.ThreshDyInitEntry.configure(takefocus="")
        self.ThreshDyInitEntry.configure(state="readonly")

        self.ThreshDynamicEntry = ttk.Combobox(self.SwarmFrame)
        self.ThreshDynamicEntry.place(relx=0.539, rely=0.624, relheight=0.032, relwidth=0.066)
        self.ThreshDynamicEntry.configure(values=['0', '1', '2', '3'])
        self.ThreshDynamicEntry.configure(font="-family {Arial} -size 9")
        self.ThreshDynamicEntry.configure(background="#f2b83d")
        self.ThreshDynamicEntry.configure(takefocus="")
        self.ThreshDynamicEntry.configure(validate="focusin")
        self.ThreshDynamicEntry.configure(validatecommand=lambda: self.update_td())
        self.ThreshDynamicEntry.configure(state="readonly")

        self.helpButton = tk.Button(self.SwarmFrame)
        self.helpButton.place(relx=0.906, rely=0.107, height=44, width=107)
        self.helpButton.configure(activebackground="#f2b83d")
        self.helpButton.configure(activeforeground="#000000")
        self.helpButton.configure(background="#f2b83d")
        self.helpButton.configure(command=lambda: self.help())
        self.helpButton.configure(compound='center')
        self.helpButton.configure(disabledforeground="#a3a3a3")
        self.helpButton.configure(font="-family {Arial} -size 9")
        self.helpButton.configure(foreground="#000000")
        self.helpButton.configure(highlightbackground="#d9d9d9")
        self.helpButton.configure(highlightcolor="black")
        self.helpButton.configure(pady="0")
        self.helpButton.configure(text='''Help''')

        if data is not None:
            self.use_data()
        else:
            self.use_defaults()

    # Populate this gui with data from our list. Return errors for missing data
    def use_data(self):
        # populate text fields and dropdowns with data from list
        error_list = list()
        if self.data.get("Pop_size") is not None:
            self.PopulationEntry.insert(0, self.data.get("Pop_size"))
        else:
            error_list.append("Missing swarm population size.")
            self.PopulationEntry.insert(0, "50")
        if self.data.get("Thresh_init") is not None:
            self.ThreshInitEntry.insert(0, self.data.get("Thresh_init"))
        else:
            error_list.append("Missing swarm threshold init.")
            self.ThreshInitEntry.insert(0, "2")
        if self.data.get("Prob_check") is not None:
            self.ProbCheckEntry.insert(0, self.data.get("Prob_check"))
        else:
            error_list.append("Missing swarm prob check.")
            self.ProbCheckEntry.insert(0, "1.0")
        if self.data.get("Response_prob") is not None:
            self.ResponseProbEntry.insert(0, self.data.get("Response_prob"))
        else:
            error_list.append("Missing swarm response probability.")
            self.ResponseProbEntry.insert(0, "1.0")
        if self.data.get("Task_selection") is not None:
            if self.data.get("Task_selection") == "random":
                self.TaskSelectionEntry.set("Random")
            else:
                self.TaskSelectionEntry.set("Urgent")
        else:
            error_list.append("Missing swarm task selection.")
            self.TaskSelectionEntry.set("Random")
        if self.data.get("Intensity_variation") is not None:
            if self.data.get("Intensity_variation") == "0":
                self.IntensityVariationEntry.set("Off")
            elif self.data.get("Intensity_variation") == "1":
                self.IntensityVariationEntry.set("Share Range")
            else:
                self.IntensityVariationEntry.set("Individual Range")
        else:
            error_list.append("Missing swarm intensity variation.")
            self.IntensityVariationEntry.set("Off")
        if self.data.get("Intensity_aging_max") is not None:
            self.AgingMaxEntry.insert(0, self.data.get("Intensity_aging_max"))
        else:
            error_list.append("Missing swarm intensity aging max.")
        if self.data.get("Intensity_aging_min") is not None:
            self.AgingMinEntry.insert(0, self.data.get("Intensity_aging_min"))
        else:
            error_list.append("Missing swarm intensity aging min.")
        if self.data.get("Intensity_aging_up") is not None:
            self.AgingUpEntry.insert(0, self.data.get("Intensity_aging_up"))
        else:
            error_list.append("Missing swarm intensity aging up.")
        if self.data.get("Intensity_aging_down") is not None:
            self.AgingDownEntry.insert(0, self.data.get("Intensity_aging_down"))
        else:
            error_list.append("Missing swarm intensity aging down.")
        if self.data.get("Kill_number") is not None:
            self.KillNumberEntry.insert(0, self.data.get("Kill_number"))
        else:
            error_list.append("Missing swarm kill number.")
            self.KillNumberEntry.insert(0, "0")
        if self.data.get("First_extinction") is not None:
            self.FirstExtinctionEntry.insert(0, self.data.get("First_extinction"))
        else:
            error_list.append("Missing swarm first extinction.")
            self.FirstExtinctionEntry.insert(0, "0")
        if self.data.get("Extinction_period") is not None:
            self.ExtinctionPeriodEntry.insert(0, self.data.get("Extinction_period"))
        else:
            error_list.append("Missing swarm extinction period.")
            self.ExtinctionPeriodEntry.insert(0, "100")
        if self.data.get("Spontaneous_response_prob") is not None:
            self.SpontaneousResponseEntry.insert(0, self.data.get("Spontaneous_response_prob"))
        else:
            error_list.append("Missing swarm spontaneous response probability.")
            self.SpontaneousResponseEntry.insert(0, "0")
        if self.data.get("Hetero_range_max") is not None:
            self.HeteroRangeMaxEntry.insert(0, self.data.get("Hetero_range_max"))
        else:
            error_list.append("Missing swarm hetero range max.")
            self.HeteroRangeMaxEntry.insert(0, "2.2")
        if self.data.get("Hetero_range_min") is not None:
            self.HeteroRangeMinEntry.insert(0, self.data.get("Hetero_range_min"))
        else:
            error_list.append("Missing swarm hetero range min.")
            self.HeteroRangeMinEntry.insert(0, "0.3")
        if self.data.get("Hetero_radius_max") is not None:
            self.HeteroRadiusMaxEntry.insert(0, self.data.get("Hetero_radius_max"))
        else:
            error_list.append("Missing swarm hetero radius max.")
            self.HeteroRadiusMaxEntry.insert(0, "0.8")
        if self.data.get("Hetero_radius_min") is not None:
            self.HeteroRadiusMinEntry.insert(0, self.data.get("Hetero_radius_min"))
        else:
            error_list.append("Missing swarm hetero radius min.")
            self.HeteroRadiusMinEntry.insert(0, "0.3")
        if self.data.get("RP_gaussian_mu") is not None:
            self.GaussianMuEntry.insert(0, self.data.get("RP_gaussian_mu"))
        else:
            error_list.append("Missing swarm rp gaussian mu.")
            self.GaussianMuEntry.insert(0, "0.7")
        if self.data.get("RP_gaussian_std") is not None:
            self.GaussianStdEntry.insert(0, self.data.get("RP_gaussian_std"))
        else:
            error_list.append("Missing swarm rp gaussian std.")
            self.GaussianStdEntry.insert(0, "0.15")
        if self.data.get("Thresh_dynamic") is not None:
            if self.data.get("Thresh_dynamic") == "0":
                self.ThreshDynamicEntry.set("0")
            elif self.data.get("Thresh_dynamic") == "1":
                self.ThreshDynamicEntry.set("1")
            elif self.data.get("Thresh_dynamic") == "2":
                self.ThreshDynamicEntry.set("2")
            else:
                self.ThreshDynamicEntry.set("3")
        else:
            error_list.append("Missing swarm threshold dynamic.")
            self.ThreshDynamicEntry.set("0")
        if self.data.get("Thresh_dynamic_init") is not None and (self.ThreshDynamicEntry.get() == "2" or
                                                                 self.ThreshDynamicEntry.get() == "3"):
            if self.data.get("Thresh_dynamic_init") == "0":
                self.ThreshDyInitEntry.set("0")
            elif self.data.get("Thresh_dynamic_init") == "1":
                self.ThreshDyInitEntry.set("1")
            elif self.ThreshDynamicEntry.get() == "2":
                # This selection can only be made if TD = 2
                self.ThreshDyInitEntry.set("2")
            else:
                self.ThreshDyInitEntry.set("0")
        elif self.data.get("Thresh_dynamic_init") is not None:
            self.ThreshDyInitEntry.configure(state="disabled")
        else:
            error_list.append("Missing swarm threshold dynamic init.")
        if self.data.get("Thresh_increase") is not None and self.ThreshDynamicEntry.get() != "0":
            self.ThreshIncreaseEntry.insert(0, self.data.get("Thresh_increase"))
        elif self.data.get("Thresh_dynamic_init") is not None:
            self.ThreshIncreaseEntry.configure(state="disabled")
        else:
            error_list.append("Missing swarm threshold increase.")
            if self.ThreshDynamicEntry.get() != "0":
                self.ThreshIncreaseEntry.insert(0, "0.033")
            else:
                self.ThreshIncreaseEntry.configure(state="disabled")
        if self.data.get("Thresh_decrease") is not None and self.ThreshDynamicEntry.get() != "0":
            self.ThreshDecreaseEntry.insert(0, self.data.get("Thresh_decrease"))
        elif self.data.get("Thresh_dynamic_init") is not None:
            self.ThreshDecreaseEntry.configure(state="disabled")
        else:
            error_list.append("Missing swarm threshold decrease.")
            if self.ThreshDynamicEntry.get() != "0":
                self.ThreshDecreaseEntry.insert(0, "0.1")
            else:
                self.ThreshDecreaseEntry.configure(state="disabled")
        # Call methods for comboboxes to ensure proper fields are enabled/disabled
        self.update_iv()
        self.update_td()
        if len(error_list) != 0:
            errorPopup.ErrorGui(top=self.top, error_list=error_list, title="Error While Reading Swarm Data")

    # populate this gui with a default swarm
    def use_defaults(self):
        self.PopulationEntry.insert(0, "50")
        self.ThreshInitEntry.insert(0, "2")
        self.ThreshDynamicEntry.set("0")
        self.ThreshDyInitEntry.configure(state="disabled")
        self.ThreshIncreaseEntry.configure(state="disabled")
        self.ThreshDecreaseEntry.configure(state="disabled")
        self.ProbCheckEntry.insert(0, "1.0")
        self.ResponseProbEntry.insert(0, "1.0")
        self.TaskSelectionEntry.set("Random")
        self.IntensityVariationEntry.set("Off")
        self.AgingMaxEntry.configure(state="disabled")
        self.AgingMinEntry.configure(state="disabled")
        self.AgingUpEntry.configure(state="disabled")
        self.AgingDownEntry.configure(state="disabled")
        self.KillNumberEntry.insert(0, "0")
        self.FirstExtinctionEntry.insert(0, "0")
        self.ExtinctionPeriodEntry.insert(0, "100")
        self.SpontaneousResponseEntry.insert(0, "0")
        self.HeteroRangeMaxEntry.insert(0, "2.2")
        self.HeteroRangeMinEntry.insert(0, "0.3")
        self.HeteroRadiusMaxEntry.insert(0, "0.8")
        self.HeteroRadiusMinEntry.insert(0, "0.3")
        self.GaussianMuEntry.insert(0, "0.7")
        self.GaussianStdEntry.insert(0, "0.15")

    # This method is called when the Intensity Variation combobox value is changed
    def update_iv(self):
        if self.IntensityVariationEntry.get() in ['Off', 'Share Range', 'Individual Range']:
            if self.IntensityVariationEntry.get() == 'Off':
                self.AgingMaxEntry.delete(0, tk.END)
                self.AgingMaxEntry.configure(state="disabled")
                self.AgingMinEntry.delete(0, tk.END)
                self.AgingMinEntry.configure(state="disabled")
                self.AgingUpEntry.delete(0, tk.END)
                self.AgingUpEntry.configure(state="disabled")
                self.AgingDownEntry.delete(0, tk.END)
                self.AgingDownEntry.configure(state="disabled")
            else:
                self.AgingMaxEntry.configure(state="normal")
                self.AgingMinEntry.configure(state="normal")
                self.AgingUpEntry.configure(state="normal")
                self.AgingDownEntry.configure(state="normal")
            return True
        else:
            return False

    # This method is called when the Thresh Dynamic combobox value is changed
    def update_td(self):
        if self.ThreshDynamicEntry.get() in ['0', '1', '2', '3']:
            if self.ThreshDynamicEntry.get() == '0':
                self.ThreshDyInitEntry.configure(state="disabled")
                self.ThreshDyInitEntry.set("")
                self.ThreshIncreaseEntry.delete(0, tk.END)
                self.ThreshIncreaseEntry.configure(state="disabled")
                self.ThreshDecreaseEntry.delete(0, tk.END)
                self.ThreshDecreaseEntry.configure(state="disabled")
            elif self.ThreshDynamicEntry.get() == '2':
                self.ThreshDyInitEntry.configure(values=['0', '1', '2'])
                self.ThreshDyInitEntry.configure(state="normal")
                self.ThreshDyInitEntry.set("0")
                self.ThreshIncreaseEntry.configure(state="normal")
                self.ThreshDecreaseEntry.configure(state="normal")
            elif self.ThreshDynamicEntry.get() == '3':
                self.ThreshDyInitEntry.configure(values=['0', '1'])
                self.ThreshDyInitEntry.set("0")
                self.ThreshDyInitEntry.configure(state="normal")
                self.ThreshIncreaseEntry.configure(state="normal")
                self.ThreshDecreaseEntry.configure(state="normal")
            else:
                self.ThreshDyInitEntry.configure(state="disabled")
                self.ThreshDyInitEntry.set("")
                self.ThreshIncreaseEntry.configure(state="normal")
                self.ThreshDecreaseEntry.configure(state="normal")
            return True
        else:
            return False

    # go to the previous screen that generated this gui, but keep this gui alive
    def go_back(self):
        self.previous.BaseFrame.tkraise()

    # validate the entered data and go to the review screen
    def go_to_check(self):
        data, error_list = self.validate()
        if len(error_list) == 0:
            self.next = statReview.ReviewGUI(top=self.top, previous=self, home=self.home, swarmData=data,
                                             demandFrame=self.previous)
        else:
            errorPopup.ErrorGui(top=self.top, error_list=error_list, title="Invalid Swarm Specification")

    # returns a list of all data entered in this gui
    def collect_data(self):
        return {"Pop_size": self.PopulationEntry.get(), "Thresh_init": self.ThreshInitEntry.get(),
                "Prob_check": self.ProbCheckEntry.get(), "Response_prob": self.ResponseProbEntry.get(),
                "Task_selection": self.TaskSelectionEntry.get(),
                "Intensity_variation": self.IntensityVariationEntry.get(),
                "Intensity_aging_max": self.AgingMaxEntry.get(), "Intensity_aging_min": self.AgingMinEntry.get(),
                "Intensity_aging_up": self.AgingUpEntry.get(), "Intensity_aging_down": self.AgingDownEntry.get(),
                "Kill_number": self.KillNumberEntry.get(), "First_extinction": self.FirstExtinctionEntry.get(),
                "Extinction_period": self.ExtinctionPeriodEntry.get(),
                "Spontaneous_response_prob": self.SpontaneousResponseEntry.get(),
                "Hetero_range_max": self.HeteroRangeMaxEntry.get(), "Hetero_range_min": self.HeteroRangeMinEntry.get(),
                "Hetero_radius_max": self.HeteroRangeMaxEntry.get(),
                "Hetero_radius_min": self.HeteroRadiusMinEntry.get(), "RP_gaussian_mu": self.GaussianMuEntry.get(),
                "RP_gaussian_std": self.GaussianStdEntry.get(), "Thresh_dynamic": self.ThreshDynamicEntry.get(),
                "Thresh_dynamic_init": self.ThreshDyInitEntry.get(), "Thresh_increase": self.ThreshIncreaseEntry.get(),
                "Thresh_decrease": self.ThreshDecreaseEntry.get()}

    # Ensure the swarm definition is valid, and add data to a list
    def validate(self):
        data = self.collect_data()
        error_list = simSetup.validate_swarm(data)
        if len(error_list) != 0:
            return {}, error_list
        return data, error_list

    # called when the user clicks the logout button
    def log_out_click(self):
        if messagebox.askokcancel(title="Log Out", message="Log Out? Any untested data will be lost."):
            self.log_out()

    # called when the user accepts logging out from this or any subsequent window
    def log_out(self):
        self.SwarmFrame.destroy()
        self.previous.log_out()
        self.next = None
        del self

    def destroy(self):
        self.SwarmFrame.destroy()
        del self

    # stub until help menu is built
    def help(self):
        print('statSwarm_support.help')


# Support code for Balloon help (also called tooltips).
# derived from http://code.activestate.com/recipes/576688-tooltip-for-tkinter/
class ToolTip(tk.Toplevel):
    """ Provides a ToolTip widget for Tkinter. """

    def __init__(self, wdgt, tooltip_font, msg=None, msgFunc=None,
                 delay=0.5, follow=True):
        self.wdgt = wdgt
        self.parent = self.wdgt.master
        tk.Toplevel.__init__(self, self.parent, bg='black', padx=1, pady=1)
        self.withdraw()
        self.overrideredirect(True)
        self.msgVar = tk.StringVar()
        if msg is None:
            self.msgVar.set('No message provided')
        else:
            self.msgVar.set(msg)
        self.msgFunc = msgFunc
        self.delay = delay
        self.follow = follow
        self.visible = 0
        self.lastMotion = 0
        tk.Message(self, textvariable=self.msgVar, bg='#FFFFDD', font=tooltip_font, aspect=1000).grid()
        self.wdgt.bind('<Enter>', self.spawn, '+')
        self.wdgt.bind('<Leave>', self.hide, '+')
        self.wdgt.bind('<Motion>', self.move, '+')

    def spawn(self, event=None):
        self.visible = 1
        self.after(int(self.delay * 1000), self.show)

    def show(self):
        if self.visible == 1 and time() - self.lastMotion > self.delay:
            self.visible = 2
        if self.visible == 2:
            self.deiconify()

    def move(self, event):
        self.lastMotion = time()
        if self.follow is False:
            self.withdraw()
            self.visible = 1
        self.geometry('+%i+%i' % (event.x_root + 20, event.y_root - 10))
        try:
            self.msgVar.set(self.msgFunc())
        except:
            pass
        self.after(int(self.delay * 1000), self.show)

    def hide(self, event=None):
        self.visible = 0
        self.withdraw()

    def update(self, msg):
        self.msgVar.set(msg)

#  End of Class ToolTip
