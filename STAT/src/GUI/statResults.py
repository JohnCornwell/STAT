#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.4
#  in conjunction with Tcl version 8.6
#    Jun 16, 2022 06:53:22 PM CDT  platform: Windows NT

import tkinter as tk
from tkinter import messagebox
from PIL import ImageTk, Image
from GUI.Window import Window
from SimAnalysis import simGraph, collectStats
import globals


class ResultGui(Window):
    def __init__(self, top=None, home=None, previous=None, name=None):
        self.top = top
        self.home = home  # reference to the home screen (previousGui)
        # previous is None if this window is generated after a test.
        # Contains a reference to the details window otherwise
        self.previous = previous
        # We will get the test using the test name
        self.name = name

        with Image.open("../Resources/bee.png") as icon:
            self.img = icon.convert("RGB")

        self.BaseFrame = tk.Frame(self.top)
        self.BaseFrame.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.BaseFrame.configure(relief='groove')
        self.BaseFrame.configure(borderwidth="2")
        self.BaseFrame.configure(relief="groove")
        self.BaseFrame.configure(background="#000000")

        self.ResultsLabel = tk.Label(self.BaseFrame)
        self.ResultsLabel.place(relx=0.15, rely=0.076, height=40, relwidth=0.7)
        self.ResultsLabel.configure(background="#000000")
        self.ResultsLabel.configure(compound='left')
        self.ResultsLabel.configure(disabledforeground="#a3a3a3")
        self.ResultsLabel.configure(font="-family {Arial} -size 24")
        self.ResultsLabel.configure(foreground="#f2b83d")
        self.ResultsLabel.configure(text='''{} Results'''.format(self.name))

        self.HomeButton = tk.Button(self.BaseFrame)
        self.HomeButton.place(relx=0.906, rely=0.107, height=44, width=107)
        self.HomeButton.configure(activebackground="#f2b83d")
        self.HomeButton.configure(activeforeground="#000000")
        self.HomeButton.configure(background="#f2b83d")
        self.HomeButton.configure(command=lambda: self.go_home())
        self.HomeButton.configure(compound='center')
        self.HomeButton.configure(disabledforeground="#a3a3a3")
        self.HomeButton.configure(font="-family {Arial} -size 9")
        self.HomeButton.configure(foreground="#000000")
        self.HomeButton.configure(highlightbackground="#d9d9d9")
        self.HomeButton.configure(highlightcolor="black")
        self.HomeButton.configure(pady="0")
        self.HomeButton.configure(text='''Home''')

        self.UsernameLabel = tk.Label(self.BaseFrame)
        self.UsernameLabel.place(relx=0.68, rely=0.015, height=60, width=285)
        self.UsernameLabel.configure(anchor='nw')
        self.UsernameLabel.configure(background="#000000")
        self.UsernameLabel.configure(compound='left')
        self.UsernameLabel.configure(disabledforeground="#a3a3a3")
        self.UsernameLabel.configure(font="-family {Arial} -size 13")
        self.UsernameLabel.configure(foreground="#f2b83d")
        self.UsernameLabel.configure(text='''Logged in as: {}'''.format(globals.username))

        self.LogOutButton = tk.Button(self.BaseFrame)
        self.LogOutButton.place(relx=0.906, rely=0.015, height=44, width=107)
        self.LogOutButton.configure(activebackground="#f2b83d")
        self.LogOutButton.configure(activeforeground="#000000")
        self.LogOutButton.configure(background="#f2b83d")
        self.LogOutButton.configure(command=lambda: self.log_out())
        self.LogOutButton.configure(compound='center')
        self.LogOutButton.configure(disabledforeground="#a3a3a3")
        self.LogOutButton.configure(font="-family {Arial} -size 9")
        self.LogOutButton.configure(foreground="#000000")
        self.LogOutButton.configure(highlightbackground="#d9d9d9")
        self.LogOutButton.configure(highlightcolor="black")
        self.LogOutButton.configure(pady="0")
        self.LogOutButton.configure(text='''Log Out''')

        self.StatsFrame = tk.Frame(self.BaseFrame)
        self.StatsFrame.place(relx=0.016, rely=0.183, relheight=0.784, relwidth=0.302)
        self.StatsFrame.configure(relief='ridge')
        self.StatsFrame.configure(borderwidth="2")
        self.StatsFrame.configure(relief="ridge")
        self.StatsFrame.configure(background="#000000")
        self.StatsFrame.configure(highlightcolor="#f2b83d")
        self.StatsFrame.configure(highlightthickness="1")

        self.PerformanceLabel = tk.Label(self.StatsFrame)
        self.PerformanceLabel.place(relx=0.026, rely=0.037, height=21, width=195)

        self.PerformanceLabel.configure(activebackground="#f9f9f9")
        self.PerformanceLabel.configure(anchor='w')
        self.PerformanceLabel.configure(background="#000000")
        self.PerformanceLabel.configure(compound='left')
        self.PerformanceLabel.configure(disabledforeground="#a3a3a3")
        self.PerformanceLabel.configure(font="-family {Arial} -size 13")
        self.PerformanceLabel.configure(foreground="#f2b83d")
        self.PerformanceLabel.configure(highlightbackground="#d9d9d9")
        self.PerformanceLabel.configure(highlightcolor="black")
        self.PerformanceLabel.configure(text='''Swarm Performance:''')

        self.AvgTaskSwitchesLabel = tk.Label(self.StatsFrame)
        self.AvgTaskSwitchesLabel.place(relx=0.026, rely=0.111, height=20, width=204)
        self.AvgTaskSwitchesLabel.configure(activebackground="#f9f9f9")
        self.AvgTaskSwitchesLabel.configure(anchor='w')
        self.AvgTaskSwitchesLabel.configure(background="#000000")
        self.AvgTaskSwitchesLabel.configure(compound='left')
        self.AvgTaskSwitchesLabel.configure(disabledforeground="#a3a3a3")
        self.AvgTaskSwitchesLabel.configure(font="-family {Arial} -size 13")
        self.AvgTaskSwitchesLabel.configure(foreground="#f2b83d")
        self.AvgTaskSwitchesLabel.configure(highlightbackground="#d9d9d9")
        self.AvgTaskSwitchesLabel.configure(highlightcolor="black")
        self.AvgTaskSwitchesLabel.configure(text='''Average Task Switches:''')

        self.MaxTaskSwitchesLabel = tk.Label(self.StatsFrame)
        self.MaxTaskSwitchesLabel.place(relx=0.026, rely=0.183, height=21, width=204)
        self.MaxTaskSwitchesLabel.configure(activebackground="#f9f9f9")
        self.MaxTaskSwitchesLabel.configure(anchor='w')
        self.MaxTaskSwitchesLabel.configure(background="#000000")
        self.MaxTaskSwitchesLabel.configure(compound='left')
        self.MaxTaskSwitchesLabel.configure(disabledforeground="#a3a3a3")
        self.MaxTaskSwitchesLabel.configure(font="-family {Arial} -size 13")
        self.MaxTaskSwitchesLabel.configure(foreground="#f2b83d")
        self.MaxTaskSwitchesLabel.configure(highlightbackground="#d9d9d9")
        self.MaxTaskSwitchesLabel.configure(highlightcolor="black")
        self.MaxTaskSwitchesLabel.configure(text='''Max Task Switches:''')

        self.MinTaskSwitchesLabel = tk.Label(self.StatsFrame)
        self.MinTaskSwitchesLabel.place(relx=0.026, rely=0.256, height=21, width=204)
        self.MinTaskSwitchesLabel.configure(activebackground="#f9f9f9")
        self.MinTaskSwitchesLabel.configure(anchor='w')
        self.MinTaskSwitchesLabel.configure(background="#000000")
        self.MinTaskSwitchesLabel.configure(compound='left')
        self.MinTaskSwitchesLabel.configure(disabledforeground="#a3a3a3")
        self.MinTaskSwitchesLabel.configure(font="-family {Arial} -size 13")
        self.MinTaskSwitchesLabel.configure(foreground="#f2b83d")
        self.MinTaskSwitchesLabel.configure(highlightbackground="#d9d9d9")
        self.MinTaskSwitchesLabel.configure(highlightcolor="black")
        self.MinTaskSwitchesLabel.configure(text='''Min Task Switches:''')

        self.AvgSpontaneousSwitchLabel = tk.Label(self.StatsFrame)
        self.AvgSpontaneousSwitchLabel.place(relx=0.026, rely=0.33, height=21, width=245)
        self.AvgSpontaneousSwitchLabel.configure(activebackground="#f9f9f9")
        self.AvgSpontaneousSwitchLabel.configure(anchor='w')
        self.AvgSpontaneousSwitchLabel.configure(background="#000000")
        self.AvgSpontaneousSwitchLabel.configure(compound='left')
        self.AvgSpontaneousSwitchLabel.configure(disabledforeground="#a3a3a3")
        self.AvgSpontaneousSwitchLabel.configure(font="-family {Arial} -size 13")
        self.AvgSpontaneousSwitchLabel.configure(foreground="#f2b83d")
        self.AvgSpontaneousSwitchLabel.configure(highlightbackground="#d9d9d9")
        self.AvgSpontaneousSwitchLabel.configure(highlightcolor="black")
        self.AvgSpontaneousSwitchLabel.configure(text='''Average Spontaneous Switches:''')

        self.MaxSpontaneousSwitchLabel = tk.Label(self.StatsFrame)
        self.MaxSpontaneousSwitchLabel.place(relx=0.026, rely=0.404, height=21, width=225)
        self.MaxSpontaneousSwitchLabel.configure(activebackground="#f9f9f9")
        self.MaxSpontaneousSwitchLabel.configure(anchor='w')
        self.MaxSpontaneousSwitchLabel.configure(background="#000000")
        self.MaxSpontaneousSwitchLabel.configure(compound='left')
        self.MaxSpontaneousSwitchLabel.configure(disabledforeground="#a3a3a3")
        self.MaxSpontaneousSwitchLabel.configure(font="-family {Arial} -size 13")
        self.MaxSpontaneousSwitchLabel.configure(foreground="#f2b83d")
        self.MaxSpontaneousSwitchLabel.configure(highlightbackground="#d9d9d9")
        self.MaxSpontaneousSwitchLabel.configure(highlightcolor="black")
        self.MaxSpontaneousSwitchLabel.configure(text='''Max Spontaneous Switches:''')

        self.MinSpontaneousSwitchLabel = tk.Label(self.StatsFrame)
        self.MinSpontaneousSwitchLabel.place(relx=0.026, rely=0.478, height=20, width=225)
        self.MinSpontaneousSwitchLabel.configure(activebackground="#f9f9f9")
        self.MinSpontaneousSwitchLabel.configure(anchor='w')
        self.MinSpontaneousSwitchLabel.configure(background="#000000")
        self.MinSpontaneousSwitchLabel.configure(compound='left')
        self.MinSpontaneousSwitchLabel.configure(disabledforeground="#a3a3a3")
        self.MinSpontaneousSwitchLabel.configure(font="-family {Arial} -size 13")
        self.MinSpontaneousSwitchLabel.configure(foreground="#f2b83d")
        self.MinSpontaneousSwitchLabel.configure(highlightbackground="#d9d9d9")
        self.MinSpontaneousSwitchLabel.configure(highlightcolor="black")
        self.MinSpontaneousSwitchLabel.configure(text='''Min Spontaneous Switches:''')

        self.PerformanceNum = tk.Label(self.StatsFrame)
        self.PerformanceNum.place(relx=0.674, rely=0.037, height=21, width=114)
        self.PerformanceNum.configure(activebackground="#f9f9f9")
        self.PerformanceNum.configure(anchor='w')
        self.PerformanceNum.configure(background="#f2b83d")
        self.PerformanceNum.configure(compound='left')
        self.PerformanceNum.configure(disabledforeground="#a3a3a3")
        self.PerformanceNum.configure(font="-family {Arial} -size 13")
        self.PerformanceNum.configure(foreground="#000000")
        self.PerformanceNum.configure(highlightbackground="#d9d9d9")
        self.PerformanceNum.configure(highlightcolor="black")

        self.AvgTaskSwitchesNum = tk.Label(self.StatsFrame)
        self.AvgTaskSwitchesNum.place(relx=0.674, rely=0.111, height=20, width=114)
        self.AvgTaskSwitchesNum.configure(activebackground="#f9f9f9")
        self.AvgTaskSwitchesNum.configure(anchor='w')
        self.AvgTaskSwitchesNum.configure(background="#f2b83d")
        self.AvgTaskSwitchesNum.configure(compound='left')
        self.AvgTaskSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.AvgTaskSwitchesNum.configure(font="-family {Arial} -size 13")
        self.AvgTaskSwitchesNum.configure(foreground="#000000")
        self.AvgTaskSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.AvgTaskSwitchesNum.configure(highlightcolor="black")

        self.MaxTaskSwitchesNum = tk.Label(self.StatsFrame)
        self.MaxTaskSwitchesNum.place(relx=0.674, rely=0.183, height=21, width=114)
        self.MaxTaskSwitchesNum.configure(activebackground="#f9f9f9")
        self.MaxTaskSwitchesNum.configure(anchor='w')
        self.MaxTaskSwitchesNum.configure(background="#f2b83d")
        self.MaxTaskSwitchesNum.configure(compound='left')
        self.MaxTaskSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.MaxTaskSwitchesNum.configure(font="-family {Arial} -size 13")
        self.MaxTaskSwitchesNum.configure(foreground="#000000")
        self.MaxTaskSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.MaxTaskSwitchesNum.configure(highlightcolor="black")

        self.MinTaskSwitchesNum = tk.Label(self.StatsFrame)
        self.MinTaskSwitchesNum.place(relx=0.674, rely=0.256, height=21, width=114)
        self.MinTaskSwitchesNum.configure(activebackground="#f9f9f9")
        self.MinTaskSwitchesNum.configure(anchor='w')
        self.MinTaskSwitchesNum.configure(background="#f2b83d")
        self.MinTaskSwitchesNum.configure(compound='left')
        self.MinTaskSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.MinTaskSwitchesNum.configure(font="-family {Arial} -size 13")
        self.MinTaskSwitchesNum.configure(foreground="#000000")
        self.MinTaskSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.MinTaskSwitchesNum.configure(highlightcolor="black")

        self.AvgSpontaneousSwitchesNum = tk.Label(self.StatsFrame)
        self.AvgSpontaneousSwitchesNum.place(relx=0.674, rely=0.33, height=21, width=114)
        self.AvgSpontaneousSwitchesNum.configure(activebackground="#f9f9f9")
        self.AvgSpontaneousSwitchesNum.configure(anchor='w')
        self.AvgSpontaneousSwitchesNum.configure(background="#f2b83d")
        self.AvgSpontaneousSwitchesNum.configure(compound='left')
        self.AvgSpontaneousSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.AvgSpontaneousSwitchesNum.configure(font="-family {Arial} -size 13")
        self.AvgSpontaneousSwitchesNum.configure(foreground="#000000")
        self.AvgSpontaneousSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.AvgSpontaneousSwitchesNum.configure(highlightcolor="black")

        self.MaxSpontaneousSwitchesNum = tk.Label(self.StatsFrame)
        self.MaxSpontaneousSwitchesNum.place(relx=0.674, rely=0.404, height=21, width=114)
        self.MaxSpontaneousSwitchesNum.configure(activebackground="#f9f9f9")
        self.MaxSpontaneousSwitchesNum.configure(anchor='w')
        self.MaxSpontaneousSwitchesNum.configure(background="#f2b83d")
        self.MaxSpontaneousSwitchesNum.configure(compound='left')
        self.MaxSpontaneousSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.MaxSpontaneousSwitchesNum.configure(font="-family {Arial} -size 13")
        self.MaxSpontaneousSwitchesNum.configure(foreground="#000000")
        self.MaxSpontaneousSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.MaxSpontaneousSwitchesNum.configure(highlightcolor="black")

        self.MinSpontaneousSwitchesNum = tk.Label(self.StatsFrame)
        self.MinSpontaneousSwitchesNum.place(relx=0.674, rely=0.478, height=20, width=114)
        self.MinSpontaneousSwitchesNum.configure(activebackground="#f9f9f9")
        self.MinSpontaneousSwitchesNum.configure(anchor='w')
        self.MinSpontaneousSwitchesNum.configure(background="#f2b83d")
        self.MinSpontaneousSwitchesNum.configure(compound='left')
        self.MinSpontaneousSwitchesNum.configure(disabledforeground="#a3a3a3")
        self.MinSpontaneousSwitchesNum.configure(font="-family {Arial} -size 13")
        self.MinSpontaneousSwitchesNum.configure(foreground="#000000")
        self.MinSpontaneousSwitchesNum.configure(highlightbackground="#d9d9d9")
        self.MinSpontaneousSwitchesNum.configure(highlightcolor="black")

        self.LogoCanvas = tk.Canvas(self.StatsFrame)
        self.LogoCanvas.place(relx=0.2, rely=0.544, relheight=0.427, relwidth=0.6)
        self.LogoCanvas.configure(background="#000000")
        self.LogoCanvas.configure(borderwidth="0", highlightthickness="0")
        self.LogoCanvas.configure(insertbackground="black")
        self.LogoCanvas.configure(relief="ridge")
        self.LogoCanvas.configure(selectbackground="#c4c4c4")
        self.LogoCanvas.configure(selectforeground="black")
        self.logo = ImageTk.PhotoImage(self.img.resize((self.LogoCanvas.winfo_width(),
                                                        self.LogoCanvas.winfo_height())))
        self.can_img = self.LogoCanvas.create_image(0, 0, anchor="nw", image=self.logo)
        self.LogoCanvas.bind("<Configure>", self.resize)

        self.ButtonFrame = tk.Frame(self.BaseFrame)
        self.ButtonFrame.place(relx=0.336, rely=0.183, relheight=0.784, relwidth=0.645)
        self.ButtonFrame.configure(relief='ridge')
        self.ButtonFrame.configure(borderwidth="2")
        self.ButtonFrame.configure(relief="ridge")
        self.ButtonFrame.configure(background="#000000")
        self.ButtonFrame.configure(highlightthickness="1")

        self.ActorTaskButton = tk.Button(self.ButtonFrame)
        self.ActorTaskButton.place(relx=0.024, rely=0.05, height=64, width=227)
        self.ActorTaskButton.configure(activebackground="beige")
        self.ActorTaskButton.configure(activeforeground="#000000")
        self.ActorTaskButton.configure(background="#f2b83d")
        self.ActorTaskButton.configure(command=lambda: self.view_task_demand())
        self.ActorTaskButton.configure(compound='left')
        self.ActorTaskButton.configure(disabledforeground="#a3a3a3")
        self.ActorTaskButton.configure(font="-family {Arial} -size 15")
        self.ActorTaskButton.configure(foreground="#000000")
        self.ActorTaskButton.configure(highlightbackground="#d9d9d9")
        self.ActorTaskButton.configure(highlightcolor="black")
        self.ActorTaskButton.configure(pady="0")
        self.ActorTaskButton.configure(text='''Task Demand''')

        self.TaskTotalButton = tk.Button(self.ButtonFrame)
        self.TaskTotalButton.place(relx=0.363, rely=0.05, height=64, width=227)
        self.TaskTotalButton.configure(activebackground="beige")
        self.TaskTotalButton.configure(activeforeground="#000000")
        self.TaskTotalButton.configure(background="#f2b83d")
        self.TaskTotalButton.configure(command=lambda: self.view_task_action())
        self.TaskTotalButton.configure(compound='left')
        self.TaskTotalButton.configure(disabledforeground="#a3a3a3")
        self.TaskTotalButton.configure(font="-family {Arial} -size 15")
        self.TaskTotalButton.configure(foreground="#000000")
        self.TaskTotalButton.configure(highlightbackground="#d9d9d9")
        self.TaskTotalButton.configure(highlightcolor="black")
        self.TaskTotalButton.configure(pady="0")
        self.TaskTotalButton.configure(text='''Task Satisfaction''')

        self.TaskAccuracyButton = tk.Button(self.ButtonFrame)
        self.TaskAccuracyButton.place(relx=0.702, rely=0.05, height=64, width=227)
        self.TaskAccuracyButton.configure(activebackground="beige")
        self.TaskAccuracyButton.configure(activeforeground="#000000")
        self.TaskAccuracyButton.configure(background="#f2b83d")
        self.TaskAccuracyButton.configure(command=lambda: self.view_task_accuracy())
        self.TaskAccuracyButton.configure(compound='left')
        self.TaskAccuracyButton.configure(disabledforeground="#a3a3a3")
        self.TaskAccuracyButton.configure(font="-family {Arial} -size 15")
        self.TaskAccuracyButton.configure(foreground="#000000")
        self.TaskAccuracyButton.configure(highlightbackground="#d9d9d9")
        self.TaskAccuracyButton.configure(highlightcolor="black")
        self.TaskAccuracyButton.configure(pady="0")
        self.TaskAccuracyButton.configure(text='''Task Accuracy''')

        # self.RawThreshButton = tk.Button(self.ButtonFrame)
        # self.RawThreshButton.place(relx=0.024, rely=0.252, height=64, width=227)
        # self.RawThreshButton.configure(activebackground="beige")
        # self.RawThreshButton.configure(activeforeground="#000000")
        # self.RawThreshButton.configure(background="#f2b83d")
        # self.RawThreshButton.configure(command=lambda: self.view_raw_thresh())
        # self.RawThreshButton.configure(compound='left')
        # self.RawThreshButton.configure(disabledforeground="#a3a3a3")
        # self.RawThreshButton.configure(font="-family {Arial} -size 15")
        # self.RawThreshButton.configure(foreground="#000000")
        # self.RawThreshButton.configure(highlightbackground="#d9d9d9")
        # self.RawThreshButton.configure(highlightcolor="black")
        # self.RawThreshButton.configure(pady="0")
        # self.RawThreshButton.configure(text='''Raw Thresholds''')

        # self.ScaledThreshButton = tk.Button(self.ButtonFrame)
        # self.ScaledThreshButton.place(relx=0.702, rely=0.252, height=64, width=227)
        # self.ScaledThreshButton.configure(activebackground="beige")
        # self.ScaledThreshButton.configure(activeforeground="#000000")
        # self.ScaledThreshButton.configure(background="#f2b83d")
        # self.ScaledThreshButton.configure(command=lambda: self.view_scaled_thresh())
        # self.ScaledThreshButton.configure(compound='left')
        # self.ScaledThreshButton.configure(disabledforeground="#a3a3a3")
        # self.ScaledThreshButton.configure(font="-family {Arial} -size 15")
        # self.ScaledThreshButton.configure(foreground="#000000")
        # self.ScaledThreshButton.configure(highlightbackground="#d9d9d9")
        # self.ScaledThreshButton.configure(highlightcolor="black")
        # self.ScaledThreshButton.configure(pady="0")
        # self.ScaledThreshButton.configure(text='''Scaled Thresholds''')

        self.SimTotalButton = tk.Button(self.ButtonFrame)
        self.SimTotalButton.place(relx=0.024, rely=0.57, height=64, width=227)
        self.SimTotalButton.configure(activebackground="beige")
        self.SimTotalButton.configure(activeforeground="#000000")
        self.SimTotalButton.configure(background="#f2b83d")
        self.SimTotalButton.configure(command=lambda: self.view_sim_total())
        self.SimTotalButton.configure(compound='left')
        self.SimTotalButton.configure(disabledforeground="#a3a3a3")
        self.SimTotalButton.configure(font="-family {Arial} -size 15")
        self.SimTotalButton.configure(foreground="#000000")
        self.SimTotalButton.configure(highlightbackground="#d9d9d9")
        self.SimTotalButton.configure(highlightcolor="black")
        self.SimTotalButton.configure(pady="0")
        self.SimTotalButton.configure(text='''Total Action''')

        self.PushAllButton = tk.Button(self.ButtonFrame)
        self.PushAllButton.place(relx=0.363, rely=0.57, height=64, width=227)
        self.PushAllButton.configure(activebackground="beige")
        self.PushAllButton.configure(activeforeground="#000000")
        self.PushAllButton.configure(background="#f2b83d")
        self.PushAllButton.configure(command=lambda: self.view_push_all())
        self.PushAllButton.configure(compound='left')
        self.PushAllButton.configure(disabledforeground="#a3a3a3")
        self.PushAllButton.configure(font="-family {Arial} -size 15")
        self.PushAllButton.configure(foreground="#000000")
        self.PushAllButton.configure(highlightbackground="#d9d9d9")
        self.PushAllButton.configure(highlightcolor="black")
        self.PushAllButton.configure(pady="0")
        self.PushAllButton.configure(text='''Agents Pushing''')

        self.PushNoneButton = tk.Button(self.ButtonFrame)
        self.PushNoneButton.place(relx=0.702, rely=0.57, height=64, width=227)
        self.PushNoneButton.configure(activebackground="beige")
        self.PushNoneButton.configure(activeforeground="#000000")
        self.PushNoneButton.configure(background="#f2b83d")
        self.PushNoneButton.configure(command=lambda: self.view_push_none())
        self.PushNoneButton.configure(compound='left')
        self.PushNoneButton.configure(disabledforeground="#a3a3a3")
        self.PushNoneButton.configure(font="-family {Arial} -size 15")
        self.PushNoneButton.configure(foreground="#000000")
        self.PushNoneButton.configure(highlightbackground="#d9d9d9")
        self.PushNoneButton.configure(highlightcolor="black")
        self.PushNoneButton.configure(pady="0")
        self.PushNoneButton.configure(text='''Agents Resting''')

        self.SteplenButton = tk.Button(self.ButtonFrame)
        self.SteplenButton.place(relx=0.024, rely=0.83, height=64, width=227)
        self.SteplenButton.configure(activebackground="beige")
        self.SteplenButton.configure(activeforeground="#000000")
        self.SteplenButton.configure(background="#f2b83d")
        self.SteplenButton.configure(command=lambda: self.view_all_demand())
        self.SteplenButton.configure(compound='left')
        self.SteplenButton.configure(disabledforeground="#a3a3a3")
        self.SteplenButton.configure(font="-family {Arial} -size 15")
        self.SteplenButton.configure(foreground="#000000")
        self.SteplenButton.configure(highlightbackground="#d9d9d9")
        self.SteplenButton.configure(highlightcolor="black")
        self.SteplenButton.configure(pady="0")
        self.SteplenButton.configure(text='''All Demand''')

        self.SwarmPerformanceButton = tk.Button(self.ButtonFrame)
        self.SwarmPerformanceButton.place(relx=0.363, rely=0.83, height=64, width=227)
        self.SwarmPerformanceButton.configure(activebackground="beige")
        self.SwarmPerformanceButton.configure(activeforeground="#000000")
        self.SwarmPerformanceButton.configure(background="#f2b83d")
        self.SwarmPerformanceButton.configure(command=lambda: self.view_swarm_performance())
        self.SwarmPerformanceButton.configure(compound='left')
        self.SwarmPerformanceButton.configure(disabledforeground="#a3a3a3")
        self.SwarmPerformanceButton.configure(font="-family {Arial} -size 15")
        self.SwarmPerformanceButton.configure(foreground="#000000")
        self.SwarmPerformanceButton.configure(highlightbackground="#d9d9d9")
        self.SwarmPerformanceButton.configure(highlightcolor="black")
        self.SwarmPerformanceButton.configure(pady="0")
        self.SwarmPerformanceButton.configure(text='''Swarm Performance''')

        self.SwitchCountButton = tk.Button(self.ButtonFrame)
        self.SwitchCountButton.place(relx=0.702, rely=0.83, height=64, width=227)
        self.SwitchCountButton.configure(activebackground="beige")
        self.SwitchCountButton.configure(activeforeground="#000000")
        self.SwitchCountButton.configure(background="#f2b83d")
        self.SwitchCountButton.configure(command=lambda: self.view_switch_count())
        self.SwitchCountButton.configure(compound='left')
        self.SwitchCountButton.configure(disabledforeground="#a3a3a3")
        self.SwitchCountButton.configure(font="-family {Arial} -size 15")
        self.SwitchCountButton.configure(foreground="#000000")
        self.SwitchCountButton.configure(highlightbackground="#d9d9d9")
        self.SwitchCountButton.configure(highlightcolor="black")
        self.SwitchCountButton.configure(pady="0")
        self.SwitchCountButton.configure(text='''Task Switches''')

        self.SwitchPercentActButton = tk.Button(self.ButtonFrame)
        self.SwitchPercentActButton.place(relx=0.024, rely=0.31, height=64, width=227)
        self.SwitchPercentActButton.configure(activebackground="beige")
        self.SwitchPercentActButton.configure(activeforeground="#000000")
        self.SwitchPercentActButton.configure(background="#f2b83d")
        self.SwitchPercentActButton.configure(command=lambda: self.view_switch_percent_act())
        self.SwitchPercentActButton.configure(compound='left')
        self.SwitchPercentActButton.configure(disabledforeground="#a3a3a3")
        self.SwitchPercentActButton.configure(font="-family {Arial} -size 15")
        self.SwitchPercentActButton.configure(foreground="#000000")
        self.SwitchPercentActButton.configure(highlightbackground="#d9d9d9")
        self.SwitchPercentActButton.configure(highlightcolor="black")
        self.SwitchPercentActButton.configure(pady="0")
        self.SwitchPercentActButton.configure(text='''Percent Actor Switches''')

        self.SwitchPercentAllButton = tk.Button(self.ButtonFrame)
        self.SwitchPercentAllButton.place(relx=0.702, rely=0.31, height=64, width=227)
        self.SwitchPercentAllButton.configure(activebackground="beige")
        self.SwitchPercentAllButton.configure(activeforeground="#000000")
        self.SwitchPercentAllButton.configure(background="#f2b83d")
        self.SwitchPercentAllButton.configure(command=lambda: self.view_switch_percent_all())
        self.SwitchPercentAllButton.configure(compound='left')
        self.SwitchPercentAllButton.configure(disabledforeground="#a3a3a3")
        self.SwitchPercentAllButton.configure(font="-family {Arial} -size 15")
        self.SwitchPercentAllButton.configure(foreground="#000000")
        self.SwitchPercentAllButton.configure(highlightbackground="#d9d9d9")
        self.SwitchPercentAllButton.configure(highlightcolor="black")
        self.SwitchPercentAllButton.configure(pady="0")
        self.SwitchPercentAllButton.configure(text='''Percent All Switches''')

        self.StepDemandButton = tk.Button(self.ButtonFrame)
        self.StepDemandButton.place(relx=0.363, rely=0.31, height=64, width=227)
        self.StepDemandButton.configure(activebackground="beige")
        self.StepDemandButton.configure(activeforeground="#000000")
        self.StepDemandButton.configure(background="#f2b83d")
        self.StepDemandButton.configure(command=lambda: self.view_step_demand_delivered())
        self.StepDemandButton.configure(compound='left')
        self.StepDemandButton.configure(disabledforeground="#a3a3a3")
        self.StepDemandButton.configure(font="-family {Arial} -size 15")
        self.StepDemandButton.configure(foreground="#000000")
        self.StepDemandButton.configure(highlightbackground="#d9d9d9")
        self.StepDemandButton.configure(highlightcolor="black")
        self.StepDemandButton.configure(pady="0")
        self.StepDemandButton.configure(text='''Demand v Delivered''')

        self.get_stats()

    def get_stats(self):
        error, data = collectStats.collect_stats(self.name)
        if error != "":
            messagebox.showinfo(title="Error", message=error)
            return
        self.PerformanceNum.configure(text=data.get("avg_accuracy"))
        self.AvgTaskSwitchesNum.configure(text=data.get("switch_avg"))
        self.MaxTaskSwitchesNum.configure(text=data.get("switch_max"))
        self.MinTaskSwitchesNum.configure(text=data.get("switch_min"))
        self.AvgSpontaneousSwitchesNum.configure(text=data.get("spontaneous_avg"))
        self.MaxSpontaneousSwitchesNum.configure(text=data.get("spontaneous_max"))
        self.MinSpontaneousSwitchesNum.configure(text=data.get("spontaneous_min"))
        
    def log_out(self):
        # If there is a previous window (details window) we can chain log_out there
        if self.previous is not None:
            self.previous.log_out()
        else:
            self.home.log_out()
        self.destroy()

    def destroy(self):
        self.BaseFrame.destroy()
        del self

    # This function is called when the canvas is resized in order to
    # resize the image within
    def resize(self, event):
        height = event.height
        width = event.width
        self.logo = ImageTk.PhotoImage(self.img.resize((width, height)))
        self.LogoCanvas.itemconfig(self.can_img, image=self.logo)

    def go_home(self):
        # Delete this window and the details window if it exists to navigate home
        if self.previous is not None:
            self.previous.destroy()
        else:
            # this is a new test, so the home screen need to be updated to display it
            self.home.refresh()
        self.destroy()

    def view_task_demand(self):
        self.get_task_graph("Task_{}_Demand.png")

    def view_push_all(self):
        error = simGraph.open_graph(self.name, "Agents_Pushing.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)


    def view_push_none(self):
        error = simGraph.open_graph(self.name, "Agents_Resting.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_raw_thresh(self):
        print('statResults_support.view_raw_thresh')

    def view_scaled_thresh(self):
        print('statResults_support.view_scaled_thresh')

    def view_sim_total(self):
        error = simGraph.open_graph(self.name, "All_Action.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_step_demand_delivered(self):
        self.get_task_graph("Task_{}_Demand_v_Delivered.png")

    def view_all_demand(self):
        error = simGraph.open_graph(self.name, "All_Demand.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_swarm_performance(self):
        error = simGraph.open_graph(self.name, "Swarm_Performance.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_switch_count(self):
        error = simGraph.open_graph(self.name, "Task_Switches.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_switch_percent_act(self):
        error = simGraph.open_graph(self.name, "Percent_Actor_Switches.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_switch_percent_all(self):
        error = simGraph.open_graph(self.name, "Percent_All_Switches.png")
        if error != "":
            messagebox.showinfo(title="Error Opening Graph", message=error)

    def view_task_accuracy(self):
        self.get_task_graph("Task_{}_Accuracy.png")

    def view_task_action(self):
        self.get_task_graph("Task_{}_Action.png")

    # Create a popup window to get the task number for a graph, and then generate the
    # graph corresponding to that task number
    def get_task_graph(self, graph_name):
        task_window = tk.Toplevel(self.top)
        task_window["bg"] = "black"
        task_window.geometry('300x150')
        task_window.resizable(False, False)
        task_window.grab_set()
        task_window.tk.call('wm', 'iconphoto', task_window._w, globals.icon)
        task_window.title("Task Number")

        # this will be called when the submit button is clicked
        def on_submit():
            try:
                task_num = int(task_input.get())
                task_window.grab_release()
                task_window.destroy()
                error = simGraph.open_graph(self.name, graph_name.format(task_num))
                if error != "":
                    messagebox.showinfo(title="Error Opening Graph", message=error)
            except ValueError:
                messagebox.showinfo(title="Task Number Error", message="You must enter a positive integer.")

        # this will be called when the popup is closed
        def on_closing():
            task_window.grab_release()
            task_window.destroy()

        base_frame = tk.Frame(task_window, width=200, height=200, borderwidth=2, bg="black")
        base_frame.pack()
        task_window.protocol("WM_DELETE_WINDOW", on_closing)
        label = tk.Label(base_frame, text="Enter a task number:", bg="black", fg="#f2b83d",
                         font="-family {Arial} -size 13")
        label.grid(row=0, column=0, pady=5)
        task_input = tk.Entry(base_frame, bg="#f2b83d", fg="black", width=15, font="-family {Arial} -size 13")
        task_input.grid(row=1, column=0)
        # For some reason, a 7 x 2 pixel button takes up more than 7 x 2 pixels...
        button_close = tk.Button(base_frame, width=7, height=2, text="Submit", background="#f2b83d",
                                 command=lambda: on_submit())
        button_close.grid(row=2, column=0, padx=10, pady=10)
